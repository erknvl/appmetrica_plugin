// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum AppMetricaDeferredDeeplinkReasonPigeon {
  NOT_A_FIRST_LAUNCH,
  PARSE_ERROR,
  UNKNOWN,
  NO_REFERRER,
  NO_ERROR,
}

enum AppMetricaDeviceIdReasonPigeon {
  UNKNOWN,
  NETWORK,
  INVALID_RESPONSE,
  NO_ERROR,
}

enum UserProfileAttributeType {
  BIRTH_DATE,
  BOOLEAN,
  COUNTER,
  GENDER,
  NAME,
  NOTIFICATION_ENABLED,
  NUMBER,
  STRING,
}

enum GenderPigeon {
  MALE,
  FEMALE,
  OTHER,
  UNDEFINED,
}

class AppMetricaConfigPigeon {
  AppMetricaConfigPigeon({
    required this.apiKey,
    this.appVersion,
    this.crashReporting,
    this.firstActivationAsUpdate,
    this.location,
    this.locationTracking,
    this.logs,
    this.sessionTimeout,
    this.statisticsSending,
    this.preloadInfo,
    this.maxReportsInDatabaseCount,
    this.nativeCrashReporting,
    this.sessionsAutoTracking,
    this.errorEnvironment,
    this.userProfileID,
    this.revenueAutoTracking,
  });

  String apiKey;
  String? appVersion;
  bool? crashReporting;
  bool? firstActivationAsUpdate;
  LocationPigeon? location;
  bool? locationTracking;
  bool? logs;
  int? sessionTimeout;
  bool? statisticsSending;
  PreloadInfoPigeon? preloadInfo;
  int? maxReportsInDatabaseCount;
  bool? nativeCrashReporting;
  bool? sessionsAutoTracking;
  Map<String?, String?>? errorEnvironment;
  String? userProfileID;
  bool? revenueAutoTracking;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apiKey'] = apiKey;
    pigeonMap['appVersion'] = appVersion;
    pigeonMap['crashReporting'] = crashReporting;
    pigeonMap['firstActivationAsUpdate'] = firstActivationAsUpdate;
    pigeonMap['location'] = location?.encode();
    pigeonMap['locationTracking'] = locationTracking;
    pigeonMap['logs'] = logs;
    pigeonMap['sessionTimeout'] = sessionTimeout;
    pigeonMap['statisticsSending'] = statisticsSending;
    pigeonMap['preloadInfo'] = preloadInfo?.encode();
    pigeonMap['maxReportsInDatabaseCount'] = maxReportsInDatabaseCount;
    pigeonMap['nativeCrashReporting'] = nativeCrashReporting;
    pigeonMap['sessionsAutoTracking'] = sessionsAutoTracking;
    pigeonMap['errorEnvironment'] = errorEnvironment;
    pigeonMap['userProfileID'] = userProfileID;
    pigeonMap['revenueAutoTracking'] = revenueAutoTracking;
    return pigeonMap;
  }

  static AppMetricaConfigPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppMetricaConfigPigeon(
      apiKey: pigeonMap['apiKey']! as String,
      appVersion: pigeonMap['appVersion'] as String?,
      crashReporting: pigeonMap['crashReporting'] as bool?,
      firstActivationAsUpdate: pigeonMap['firstActivationAsUpdate'] as bool?,
      location: pigeonMap['location'] != null
          ? LocationPigeon.decode(pigeonMap['location']!)
          : null,
      locationTracking: pigeonMap['locationTracking'] as bool?,
      logs: pigeonMap['logs'] as bool?,
      sessionTimeout: pigeonMap['sessionTimeout'] as int?,
      statisticsSending: pigeonMap['statisticsSending'] as bool?,
      preloadInfo: pigeonMap['preloadInfo'] != null
          ? PreloadInfoPigeon.decode(pigeonMap['preloadInfo']!)
          : null,
      maxReportsInDatabaseCount: pigeonMap['maxReportsInDatabaseCount'] as int?,
      nativeCrashReporting: pigeonMap['nativeCrashReporting'] as bool?,
      sessionsAutoTracking: pigeonMap['sessionsAutoTracking'] as bool?,
      errorEnvironment:
          (pigeonMap['errorEnvironment'] as Map<Object?, Object?>?)
              ?.cast<String?, String?>(),
      userProfileID: pigeonMap['userProfileID'] as String?,
      revenueAutoTracking: pigeonMap['revenueAutoTracking'] as bool?,
    );
  }
}

class LocationPigeon {
  LocationPigeon({
    required this.latitude,
    required this.longitude,
    this.provider,
    this.altitude,
    this.accuracy,
    this.course,
    this.speed,
    this.timestamp,
  });

  double latitude;
  double longitude;
  String? provider;
  double? altitude;
  double? accuracy;
  double? course;
  double? speed;
  int? timestamp;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['latitude'] = latitude;
    pigeonMap['longitude'] = longitude;
    pigeonMap['provider'] = provider;
    pigeonMap['altitude'] = altitude;
    pigeonMap['accuracy'] = accuracy;
    pigeonMap['course'] = course;
    pigeonMap['speed'] = speed;
    pigeonMap['timestamp'] = timestamp;
    return pigeonMap;
  }

  static LocationPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return LocationPigeon(
      latitude: pigeonMap['latitude']! as double,
      longitude: pigeonMap['longitude']! as double,
      provider: pigeonMap['provider'] as String?,
      altitude: pigeonMap['altitude'] as double?,
      accuracy: pigeonMap['accuracy'] as double?,
      course: pigeonMap['course'] as double?,
      speed: pigeonMap['speed'] as double?,
      timestamp: pigeonMap['timestamp'] as int?,
    );
  }
}

class PreloadInfoPigeon {
  PreloadInfoPigeon({
    required this.trackingId,
    this.additionalInfo,
  });

  String trackingId;
  Map<Object?, Object?>? additionalInfo;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['trackingId'] = trackingId;
    pigeonMap['additionalInfo'] = additionalInfo;
    return pigeonMap;
  }

  static PreloadInfoPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return PreloadInfoPigeon(
      trackingId: pigeonMap['trackingId']! as String,
      additionalInfo: pigeonMap['additionalInfo'] as Map<Object?, Object?>?,
    );
  }
}

class AppMetricaDeferredDeeplinkErrorPigeon {
  AppMetricaDeferredDeeplinkErrorPigeon({
    required this.reason,
    required this.description,
    this.message,
  });

  AppMetricaDeferredDeeplinkReasonPigeon reason;
  String description;
  String? message;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['reason'] = reason.index;
    pigeonMap['description'] = description;
    pigeonMap['message'] = message;
    return pigeonMap;
  }

  static AppMetricaDeferredDeeplinkErrorPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppMetricaDeferredDeeplinkErrorPigeon(
      reason: AppMetricaDeferredDeeplinkReasonPigeon
          .values[pigeonMap['reason']! as int],
      description: pigeonMap['description']! as String,
      message: pigeonMap['message'] as String?,
    );
  }
}

class AppMetricaDeferredDeeplinkPigeon {
  AppMetricaDeferredDeeplinkPigeon({
    this.deeplink,
    this.error,
  });

  String? deeplink;
  AppMetricaDeferredDeeplinkErrorPigeon? error;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['deeplink'] = deeplink;
    pigeonMap['error'] = error?.encode();
    return pigeonMap;
  }

  static AppMetricaDeferredDeeplinkPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppMetricaDeferredDeeplinkPigeon(
      deeplink: pigeonMap['deeplink'] as String?,
      error: pigeonMap['error'] != null
          ? AppMetricaDeferredDeeplinkErrorPigeon.decode(pigeonMap['error']!)
          : null,
    );
  }
}

class AppMetricaDeferredDeeplinkParametersPigeon {
  AppMetricaDeferredDeeplinkParametersPigeon({
    this.parameters,
    this.error,
  });

  Map<Object?, Object?>? parameters;
  AppMetricaDeferredDeeplinkErrorPigeon? error;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['parameters'] = parameters;
    pigeonMap['error'] = error?.encode();
    return pigeonMap;
  }

  static AppMetricaDeferredDeeplinkParametersPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppMetricaDeferredDeeplinkParametersPigeon(
      parameters: pigeonMap['parameters'] as Map<Object?, Object?>?,
      error: pigeonMap['error'] != null
          ? AppMetricaDeferredDeeplinkErrorPigeon.decode(pigeonMap['error']!)
          : null,
    );
  }
}

class AppMetricaDeviceIdPigeon {
  AppMetricaDeviceIdPigeon({
    this.deviceId,
    required this.errorReason,
  });

  String? deviceId;
  AppMetricaDeviceIdReasonPigeon errorReason;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['deviceId'] = deviceId;
    pigeonMap['errorReason'] = errorReason.index;
    return pigeonMap;
  }

  static AppMetricaDeviceIdPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return AppMetricaDeviceIdPigeon(
      deviceId: pigeonMap['deviceId'] as String?,
      errorReason: AppMetricaDeviceIdReasonPigeon
          .values[pigeonMap['errorReason']! as int],
    );
  }
}

class RevenuePigeon {
  RevenuePigeon({
    required this.price,
    required this.currency,
    this.quantity,
    this.productId,
    this.payload,
    this.receipt,
    this.transactionId,
  });

  String price;
  String currency;
  int? quantity;
  String? productId;
  String? payload;
  ReceiptPigeon? receipt;
  String? transactionId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['price'] = price;
    pigeonMap['currency'] = currency;
    pigeonMap['quantity'] = quantity;
    pigeonMap['productId'] = productId;
    pigeonMap['payload'] = payload;
    pigeonMap['receipt'] = receipt?.encode();
    pigeonMap['transactionId'] = transactionId;
    return pigeonMap;
  }

  static RevenuePigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return RevenuePigeon(
      price: pigeonMap['price']! as String,
      currency: pigeonMap['currency']! as String,
      quantity: pigeonMap['quantity'] as int?,
      productId: pigeonMap['productId'] as String?,
      payload: pigeonMap['payload'] as String?,
      receipt: pigeonMap['receipt'] != null
          ? ReceiptPigeon.decode(pigeonMap['receipt']!)
          : null,
      transactionId: pigeonMap['transactionId'] as String?,
    );
  }
}

class ReceiptPigeon {
  ReceiptPigeon({
    this.data,
    this.signature,
  });

  String? data;
  String? signature;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['data'] = data;
    pigeonMap['signature'] = signature;
    return pigeonMap;
  }

  static ReceiptPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ReceiptPigeon(
      data: pigeonMap['data'] as String?,
      signature: pigeonMap['signature'] as String?,
    );
  }
}

class ECommerceAmountPigeon {
  ECommerceAmountPigeon({
    required this.amount,
    required this.currency,
  });

  String amount;
  String currency;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['amount'] = amount;
    pigeonMap['currency'] = currency;
    return pigeonMap;
  }

  static ECommerceAmountPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceAmountPigeon(
      amount: pigeonMap['amount']! as String,
      currency: pigeonMap['currency']! as String,
    );
  }
}

class ECommerceProductPigeon {
  ECommerceProductPigeon({
    required this.sku,
    this.name,
    this.categoriesPath,
    this.payload,
    this.actualPrice,
    this.originalPrice,
    this.promocodes,
  });

  String sku;
  String? name;
  List<String?>? categoriesPath;
  Map<String?, String?>? payload;
  ECommercePricePigeon? actualPrice;
  ECommercePricePigeon? originalPrice;
  List<String?>? promocodes;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['sku'] = sku;
    pigeonMap['name'] = name;
    pigeonMap['categoriesPath'] = categoriesPath;
    pigeonMap['payload'] = payload;
    pigeonMap['actualPrice'] = actualPrice?.encode();
    pigeonMap['originalPrice'] = originalPrice?.encode();
    pigeonMap['promocodes'] = promocodes;
    return pigeonMap;
  }

  static ECommerceProductPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceProductPigeon(
      sku: pigeonMap['sku']! as String,
      name: pigeonMap['name'] as String?,
      categoriesPath:
          (pigeonMap['categoriesPath'] as List<Object?>?)?.cast<String?>(),
      payload: (pigeonMap['payload'] as Map<Object?, Object?>?)
          ?.cast<String?, String?>(),
      actualPrice: pigeonMap['actualPrice'] != null
          ? ECommercePricePigeon.decode(pigeonMap['actualPrice']!)
          : null,
      originalPrice: pigeonMap['originalPrice'] != null
          ? ECommercePricePigeon.decode(pigeonMap['originalPrice']!)
          : null,
      promocodes: (pigeonMap['promocodes'] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class ECommercePricePigeon {
  ECommercePricePigeon({
    required this.fiat,
    this.internalComponents,
  });

  ECommerceAmountPigeon fiat;
  List<ECommerceAmountPigeon?>? internalComponents;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['fiat'] = fiat.encode();
    pigeonMap['internalComponents'] = internalComponents;
    return pigeonMap;
  }

  static ECommercePricePigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommercePricePigeon(
      fiat: ECommerceAmountPigeon.decode(pigeonMap['fiat']!),
      internalComponents: (pigeonMap['internalComponents'] as List<Object?>?)
          ?.cast<ECommerceAmountPigeon?>(),
    );
  }
}

class ECommerceReferrerPigeon {
  ECommerceReferrerPigeon({
    this.type,
    this.identifier,
    this.screen,
  });

  String? type;
  String? identifier;
  ECommerceScreenPigeon? screen;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['type'] = type;
    pigeonMap['identifier'] = identifier;
    pigeonMap['screen'] = screen?.encode();
    return pigeonMap;
  }

  static ECommerceReferrerPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceReferrerPigeon(
      type: pigeonMap['type'] as String?,
      identifier: pigeonMap['identifier'] as String?,
      screen: pigeonMap['screen'] != null
          ? ECommerceScreenPigeon.decode(pigeonMap['screen']!)
          : null,
    );
  }
}

class ECommerceScreenPigeon {
  ECommerceScreenPigeon({
    this.name,
    this.categoriesPath,
    this.searchQuery,
    this.payload,
  });

  String? name;
  List<String?>? categoriesPath;
  String? searchQuery;
  Map<String?, String?>? payload;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['name'] = name;
    pigeonMap['categoriesPath'] = categoriesPath;
    pigeonMap['searchQuery'] = searchQuery;
    pigeonMap['payload'] = payload;
    return pigeonMap;
  }

  static ECommerceScreenPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceScreenPigeon(
      name: pigeonMap['name'] as String?,
      categoriesPath:
          (pigeonMap['categoriesPath'] as List<Object?>?)?.cast<String?>(),
      searchQuery: pigeonMap['searchQuery'] as String?,
      payload: (pigeonMap['payload'] as Map<Object?, Object?>?)
          ?.cast<String?, String?>(),
    );
  }
}

class ECommerceCartItemPigeon {
  ECommerceCartItemPigeon({
    required this.product,
    required this.quantity,
    required this.revenue,
    this.referrer,
  });

  ECommerceProductPigeon product;
  String quantity;
  ECommercePricePigeon revenue;
  ECommerceReferrerPigeon? referrer;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['product'] = product.encode();
    pigeonMap['quantity'] = quantity;
    pigeonMap['revenue'] = revenue.encode();
    pigeonMap['referrer'] = referrer?.encode();
    return pigeonMap;
  }

  static ECommerceCartItemPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceCartItemPigeon(
      product: ECommerceProductPigeon.decode(pigeonMap['product']!),
      quantity: pigeonMap['quantity']! as String,
      revenue: ECommercePricePigeon.decode(pigeonMap['revenue']!),
      referrer: pigeonMap['referrer'] != null
          ? ECommerceReferrerPigeon.decode(pigeonMap['referrer']!)
          : null,
    );
  }
}

class ECommerceOrderPigeon {
  ECommerceOrderPigeon({
    required this.identifier,
    required this.items,
    this.payload,
  });

  String identifier;
  List<ECommerceCartItemPigeon?> items;
  Map<String?, String?>? payload;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['identifier'] = identifier;
    pigeonMap['items'] = items;
    pigeonMap['payload'] = payload;
    return pigeonMap;
  }

  static ECommerceOrderPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceOrderPigeon(
      identifier: pigeonMap['identifier']! as String,
      items: (pigeonMap['items'] as List<Object?>?)!
          .cast<ECommerceCartItemPigeon?>(),
      payload: (pigeonMap['payload'] as Map<Object?, Object?>?)
          ?.cast<String?, String?>(),
    );
  }
}

class ECommerceEventPigeon {
  ECommerceEventPigeon({
    required this.eventType,
    this.cartItem,
    this.order,
    this.product,
    this.referrer,
    this.screen,
  });

  String eventType;
  ECommerceCartItemPigeon? cartItem;
  ECommerceOrderPigeon? order;
  ECommerceProductPigeon? product;
  ECommerceReferrerPigeon? referrer;
  ECommerceScreenPigeon? screen;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['eventType'] = eventType;
    pigeonMap['cartItem'] = cartItem?.encode();
    pigeonMap['order'] = order?.encode();
    pigeonMap['product'] = product?.encode();
    pigeonMap['referrer'] = referrer?.encode();
    pigeonMap['screen'] = screen?.encode();
    return pigeonMap;
  }

  static ECommerceEventPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ECommerceEventPigeon(
      eventType: pigeonMap['eventType']! as String,
      cartItem: pigeonMap['cartItem'] != null
          ? ECommerceCartItemPigeon.decode(pigeonMap['cartItem']!)
          : null,
      order: pigeonMap['order'] != null
          ? ECommerceOrderPigeon.decode(pigeonMap['order']!)
          : null,
      product: pigeonMap['product'] != null
          ? ECommerceProductPigeon.decode(pigeonMap['product']!)
          : null,
      referrer: pigeonMap['referrer'] != null
          ? ECommerceReferrerPigeon.decode(pigeonMap['referrer']!)
          : null,
      screen: pigeonMap['screen'] != null
          ? ECommerceScreenPigeon.decode(pigeonMap['screen']!)
          : null,
    );
  }
}

class StackTraceElementPigeon {
  StackTraceElementPigeon({
    required this.className,
    this.fileName,
    required this.line,
    required this.column,
    required this.methodName,
  });

  String className;
  String? fileName;
  int line;
  int column;
  String methodName;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['className'] = className;
    pigeonMap['fileName'] = fileName;
    pigeonMap['line'] = line;
    pigeonMap['column'] = column;
    pigeonMap['methodName'] = methodName;
    return pigeonMap;
  }

  static StackTraceElementPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return StackTraceElementPigeon(
      className: pigeonMap['className']! as String,
      fileName: pigeonMap['fileName'] as String?,
      line: pigeonMap['line']! as int,
      column: pigeonMap['column']! as int,
      methodName: pigeonMap['methodName']! as String,
    );
  }
}

class ErrorDetailsPigeon {
  ErrorDetailsPigeon({
    required this.exceptionClass,
    this.message,
    required this.dartVersion,
    this.backtrace,
  });

  String exceptionClass;
  String? message;
  String dartVersion;
  List<StackTraceElementPigeon?>? backtrace;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['exceptionClass'] = exceptionClass;
    pigeonMap['message'] = message;
    pigeonMap['dartVersion'] = dartVersion;
    pigeonMap['backtrace'] = backtrace;
    return pigeonMap;
  }

  static ErrorDetailsPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ErrorDetailsPigeon(
      exceptionClass: pigeonMap['exceptionClass']! as String,
      message: pigeonMap['message'] as String?,
      dartVersion: pigeonMap['dartVersion']! as String,
      backtrace: (pigeonMap['backtrace'] as List<Object?>?)
          ?.cast<StackTraceElementPigeon?>(),
    );
  }
}

class UserProfileAttributePigeon {
  UserProfileAttributePigeon({
    required this.key,
    this.doubleValue,
    this.stringValue,
    this.boolValue,
    this.year,
    this.month,
    this.day,
    this.age,
    this.genderValue,
    this.ifUndefined,
    this.reset,
    this.type,
  });

  String key;
  double? doubleValue;
  String? stringValue;
  bool? boolValue;
  int? year;
  int? month;
  int? day;
  int? age;
  GenderPigeon? genderValue;
  bool? ifUndefined;
  bool? reset;
  UserProfileAttributeType? type;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['key'] = key;
    pigeonMap['doubleValue'] = doubleValue;
    pigeonMap['stringValue'] = stringValue;
    pigeonMap['boolValue'] = boolValue;
    pigeonMap['year'] = year;
    pigeonMap['month'] = month;
    pigeonMap['day'] = day;
    pigeonMap['age'] = age;
    pigeonMap['genderValue'] = genderValue?.index;
    pigeonMap['ifUndefined'] = ifUndefined;
    pigeonMap['reset'] = reset;
    pigeonMap['type'] = type?.index;
    return pigeonMap;
  }

  static UserProfileAttributePigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UserProfileAttributePigeon(
      key: pigeonMap['key']! as String,
      doubleValue: pigeonMap['doubleValue'] as double?,
      stringValue: pigeonMap['stringValue'] as String?,
      boolValue: pigeonMap['boolValue'] as bool?,
      year: pigeonMap['year'] as int?,
      month: pigeonMap['month'] as int?,
      day: pigeonMap['day'] as int?,
      age: pigeonMap['age'] as int?,
      genderValue: pigeonMap['genderValue'] != null
          ? GenderPigeon.values[pigeonMap['genderValue']! as int]
          : null,
      ifUndefined: pigeonMap['ifUndefined'] as bool?,
      reset: pigeonMap['reset'] as bool?,
      type: pigeonMap['type'] != null
          ? UserProfileAttributeType.values[pigeonMap['type']! as int]
          : null,
    );
  }
}

class UserProfilePigeon {
  UserProfilePigeon({
    required this.attributes,
  });

  List<UserProfileAttributePigeon?> attributes;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['attributes'] = attributes;
    return pigeonMap;
  }

  static UserProfilePigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return UserProfilePigeon(
      attributes: (pigeonMap['attributes'] as List<Object?>?)!
          .cast<UserProfileAttributePigeon?>(),
    );
  }
}

class ReporterConfigPigeon {
  ReporterConfigPigeon({
    required this.apiKey,
    this.sessionTimeout,
    this.statisticsSending,
    this.maxReportsInDatabaseCount,
    this.userProfileID,
    this.logs,
  });

  String apiKey;
  int? sessionTimeout;
  bool? statisticsSending;
  int? maxReportsInDatabaseCount;
  String? userProfileID;
  bool? logs;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['apiKey'] = apiKey;
    pigeonMap['sessionTimeout'] = sessionTimeout;
    pigeonMap['statisticsSending'] = statisticsSending;
    pigeonMap['maxReportsInDatabaseCount'] = maxReportsInDatabaseCount;
    pigeonMap['userProfileID'] = userProfileID;
    pigeonMap['logs'] = logs;
    return pigeonMap;
  }

  static ReporterConfigPigeon decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ReporterConfigPigeon(
      apiKey: pigeonMap['apiKey']! as String,
      sessionTimeout: pigeonMap['sessionTimeout'] as int?,
      statisticsSending: pigeonMap['statisticsSending'] as bool?,
      maxReportsInDatabaseCount: pigeonMap['maxReportsInDatabaseCount'] as int?,
      userProfileID: pigeonMap['userProfileID'] as String?,
      logs: pigeonMap['logs'] as bool?,
    );
  }
}

class _AppMetricaConfigConverterPigeonCodec extends StandardMessageCodec {
  const _AppMetricaConfigConverterPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppMetricaConfigPigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LocationPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PreloadInfoPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AppMetricaConfigPigeon.decode(readValue(buffer)!);

      case 129:
        return LocationPigeon.decode(readValue(buffer)!);

      case 130:
        return PreloadInfoPigeon.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AppMetricaConfigConverterPigeon {
  /// Constructor for [AppMetricaConfigConverterPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppMetricaConfigConverterPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec =
      _AppMetricaConfigConverterPigeonCodec();

  Future<String> toJson(AppMetricaConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaConfigConverterPigeon.toJson', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }
}

class _AppMetricaPigeonCodec extends StandardMessageCodec {
  const _AppMetricaPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppMetricaConfigPigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkErrorPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkParametersPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeviceIdPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceCartItemPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceEventPigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceOrderPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceReferrerPigeon) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceScreenPigeon) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is LocationPigeon) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is PreloadInfoPigeon) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is ReceiptPigeon) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is ReporterConfigPigeon) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is RevenuePigeon) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is StackTraceElementPigeon) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is UserProfileAttributePigeon) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is UserProfilePigeon) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return AppMetricaConfigPigeon.decode(readValue(buffer)!);

      case 129:
        return AppMetricaDeferredDeeplinkErrorPigeon.decode(readValue(buffer)!);

      case 130:
        return AppMetricaDeferredDeeplinkParametersPigeon.decode(
            readValue(buffer)!);

      case 131:
        return AppMetricaDeferredDeeplinkPigeon.decode(readValue(buffer)!);

      case 132:
        return AppMetricaDeviceIdPigeon.decode(readValue(buffer)!);

      case 133:
        return ECommerceAmountPigeon.decode(readValue(buffer)!);

      case 134:
        return ECommerceAmountPigeon.decode(readValue(buffer)!);

      case 135:
        return ECommerceCartItemPigeon.decode(readValue(buffer)!);

      case 136:
        return ECommerceEventPigeon.decode(readValue(buffer)!);

      case 137:
        return ECommerceOrderPigeon.decode(readValue(buffer)!);

      case 138:
        return ECommercePricePigeon.decode(readValue(buffer)!);

      case 139:
        return ECommercePricePigeon.decode(readValue(buffer)!);

      case 140:
        return ECommerceProductPigeon.decode(readValue(buffer)!);

      case 141:
        return ECommerceProductPigeon.decode(readValue(buffer)!);

      case 142:
        return ECommerceReferrerPigeon.decode(readValue(buffer)!);

      case 143:
        return ECommerceScreenPigeon.decode(readValue(buffer)!);

      case 144:
        return ErrorDetailsPigeon.decode(readValue(buffer)!);

      case 145:
        return ErrorDetailsPigeon.decode(readValue(buffer)!);

      case 146:
        return LocationPigeon.decode(readValue(buffer)!);

      case 147:
        return PreloadInfoPigeon.decode(readValue(buffer)!);

      case 148:
        return ReceiptPigeon.decode(readValue(buffer)!);

      case 149:
        return ReporterConfigPigeon.decode(readValue(buffer)!);

      case 150:
        return RevenuePigeon.decode(readValue(buffer)!);

      case 151:
        return StackTraceElementPigeon.decode(readValue(buffer)!);

      case 152:
        return UserProfileAttributePigeon.decode(readValue(buffer)!);

      case 153:
        return UserProfilePigeon.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AppMetricaPigeon {
  /// Constructor for [AppMetricaPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppMetricaPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AppMetricaPigeonCodec();

  Future<void> activate(AppMetricaConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.activate', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> activateReporter(ReporterConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.activateReporter', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_config]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> touchReporter(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.touchReporter', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<int> getLibraryApiLevel() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.getLibraryApiLevel', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as int?)!;
    }
  }

  Future<String> getLibraryVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.getLibraryVersion', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<void> resumeSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.resumeSession', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> pauseSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.pauseSession', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportAppOpen(String arg_deeplink) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportAppOpen', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_deeplink]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportError(
      ErrorDetailsPigeon arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportError', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_error, arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportErrorWithGroup(String arg_groupId,
      ErrorDetailsPigeon? arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportErrorWithGroup', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_groupId, arg_error, arg_message])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportUnhandledException(ErrorDetailsPigeon arg_error) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportUnhandledException', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_error]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportEventWithJson(
      String arg_eventName, String? arg_attributesJson) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportEventWithJson', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_eventName, arg_attributesJson])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportEvent(String arg_eventName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportEvent', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_eventName]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportReferralUrl(String arg_referralUrl) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportReferralUrl', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_referralUrl]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<AppMetricaDeferredDeeplinkPigeon> requestDeferredDeeplink() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplink', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AppMetricaDeferredDeeplinkPigeon?)!;
    }
  }

  Future<AppMetricaDeferredDeeplinkParametersPigeon>
      requestDeferredDeeplinkParameters() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplinkParameters',
        codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result']
          as AppMetricaDeferredDeeplinkParametersPigeon?)!;
    }
  }

  Future<AppMetricaDeviceIdPigeon> requestAppMetricaDeviceID() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.requestAppMetricaDeviceID', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as AppMetricaDeviceIdPigeon?)!;
    }
  }

  Future<void> sendEventsBuffer() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.sendEventsBuffer', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setLocation(LocationPigeon? arg_location) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.setLocation', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_location]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setLocationTracking(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.setLocationTracking', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_enabled]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setStatisticsSending(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.setStatisticsSending', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_enabled]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setUserProfileID(String? arg_userProfileID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.setUserProfileID', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_userProfileID]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportUserProfile(UserProfilePigeon arg_userProfile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_userProfile]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> putErrorEnvironmentValue(
      String arg_key, String? arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.putErrorEnvironmentValue', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_key, arg_value]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportRevenue(RevenuePigeon arg_revenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_revenue]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportECommerce(ECommerceEventPigeon arg_event) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.reportECommerce', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_event]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> handlePluginInitFinished() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.AppMetricaPigeon.handlePluginInitFinished', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _ReporterPigeonCodec extends StandardMessageCodec {
  const _ReporterPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ECommerceAmountPigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceCartItemPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceEventPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceOrderPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceReferrerPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceScreenPigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ReceiptPigeon) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is RevenuePigeon) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is StackTraceElementPigeon) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is UserProfileAttributePigeon) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is UserProfilePigeon) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return ECommerceAmountPigeon.decode(readValue(buffer)!);

      case 129:
        return ECommerceAmountPigeon.decode(readValue(buffer)!);

      case 130:
        return ECommerceCartItemPigeon.decode(readValue(buffer)!);

      case 131:
        return ECommerceEventPigeon.decode(readValue(buffer)!);

      case 132:
        return ECommerceOrderPigeon.decode(readValue(buffer)!);

      case 133:
        return ECommercePricePigeon.decode(readValue(buffer)!);

      case 134:
        return ECommercePricePigeon.decode(readValue(buffer)!);

      case 135:
        return ECommerceProductPigeon.decode(readValue(buffer)!);

      case 136:
        return ECommerceProductPigeon.decode(readValue(buffer)!);

      case 137:
        return ECommerceReferrerPigeon.decode(readValue(buffer)!);

      case 138:
        return ECommerceScreenPigeon.decode(readValue(buffer)!);

      case 139:
        return ErrorDetailsPigeon.decode(readValue(buffer)!);

      case 140:
        return ErrorDetailsPigeon.decode(readValue(buffer)!);

      case 141:
        return ReceiptPigeon.decode(readValue(buffer)!);

      case 142:
        return RevenuePigeon.decode(readValue(buffer)!);

      case 143:
        return StackTraceElementPigeon.decode(readValue(buffer)!);

      case 144:
        return UserProfileAttributePigeon.decode(readValue(buffer)!);

      case 145:
        return UserProfilePigeon.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ReporterPigeon {
  /// Constructor for [ReporterPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReporterPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ReporterPigeonCodec();

  Future<void> sendEventsBuffer(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.sendEventsBuffer', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportEvent(String arg_apiKey, String arg_eventName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportEvent', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_eventName]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportEventWithJson(String arg_apiKey, String arg_eventName,
      String? arg_attributesJson) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportEventWithJson', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
            .send(<Object?>[arg_apiKey, arg_eventName, arg_attributesJson])
        as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportError(String arg_apiKey, ErrorDetailsPigeon arg_error,
      String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportError', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey, arg_error, arg_message])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportErrorWithGroup(String arg_apiKey, String arg_groupId,
      ErrorDetailsPigeon? arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportErrorWithGroup', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
            .send(<Object?>[arg_apiKey, arg_groupId, arg_error, arg_message])
        as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportUnhandledException(
      String arg_apiKey, ErrorDetailsPigeon arg_error) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportUnhandledException', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_error]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> resumeSession(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.resumeSession', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> pauseSession(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.pauseSession', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setStatisticsSending(String arg_apiKey, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.setStatisticsSending', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_enabled]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> setUserProfileID(
      String arg_apiKey, String? arg_userProfileID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.setUserProfileID', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_apiKey, arg_userProfileID])
            as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportUserProfile(
      String arg_apiKey, UserProfilePigeon arg_userProfile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_userProfile]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportRevenue(
      String arg_apiKey, RevenuePigeon arg_revenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_revenue]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> reportECommerce(
      String arg_apiKey, ECommerceEventPigeon arg_event) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ReporterPigeon.reportECommerce', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
        .send(<Object?>[arg_apiKey, arg_event]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
