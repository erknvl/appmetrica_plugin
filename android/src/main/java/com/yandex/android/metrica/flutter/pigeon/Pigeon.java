// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.yandex.android.metrica.flutter.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Pigeon {

  public enum AppMetricaDeferredDeeplinkReasonPigeon {
    NOT_A_FIRST_LAUNCH(0),
    PARSE_ERROR(1),
    UNKNOWN(2),
    NO_REFERRER(3),
    NO_ERROR(4);

    private int index;
    private AppMetricaDeferredDeeplinkReasonPigeon(final int index) {
      this.index = index;
    }
  }

  public enum AppMetricaDeviceIdReasonPigeon {
    UNKNOWN(0),
    NETWORK(1),
    INVALID_RESPONSE(2),
    NO_ERROR(3);

    private int index;
    private AppMetricaDeviceIdReasonPigeon(final int index) {
      this.index = index;
    }
  }

  public enum UserProfileAttributeType {
    BIRTH_DATE(0),
    BOOLEAN(1),
    COUNTER(2),
    GENDER(3),
    NAME(4),
    NOTIFICATION_ENABLED(5),
    NUMBER(6),
    STRING(7);

    private int index;
    private UserProfileAttributeType(final int index) {
      this.index = index;
    }
  }

  public enum GenderPigeon {
    MALE(0),
    FEMALE(1),
    OTHER(2),
    UNDEFINED(3);

    private int index;
    private GenderPigeon(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaConfigPigeon {
    private @NonNull String apiKey;
    public @NonNull String getApiKey() { return apiKey; }
    public void setApiKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiKey\" is null.");
      }
      this.apiKey = setterArg;
    }

    private @Nullable String appVersion;
    public @Nullable String getAppVersion() { return appVersion; }
    public void setAppVersion(@Nullable String setterArg) {
      this.appVersion = setterArg;
    }

    private @Nullable Boolean crashReporting;
    public @Nullable Boolean getCrashReporting() { return crashReporting; }
    public void setCrashReporting(@Nullable Boolean setterArg) {
      this.crashReporting = setterArg;
    }

    private @Nullable Boolean firstActivationAsUpdate;
    public @Nullable Boolean getFirstActivationAsUpdate() { return firstActivationAsUpdate; }
    public void setFirstActivationAsUpdate(@Nullable Boolean setterArg) {
      this.firstActivationAsUpdate = setterArg;
    }

    private @Nullable LocationPigeon location;
    public @Nullable LocationPigeon getLocation() { return location; }
    public void setLocation(@Nullable LocationPigeon setterArg) {
      this.location = setterArg;
    }

    private @Nullable Boolean locationTracking;
    public @Nullable Boolean getLocationTracking() { return locationTracking; }
    public void setLocationTracking(@Nullable Boolean setterArg) {
      this.locationTracking = setterArg;
    }

    private @Nullable Boolean logs;
    public @Nullable Boolean getLogs() { return logs; }
    public void setLogs(@Nullable Boolean setterArg) {
      this.logs = setterArg;
    }

    private @Nullable Long sessionTimeout;
    public @Nullable Long getSessionTimeout() { return sessionTimeout; }
    public void setSessionTimeout(@Nullable Long setterArg) {
      this.sessionTimeout = setterArg;
    }

    private @Nullable Boolean statisticsSending;
    public @Nullable Boolean getStatisticsSending() { return statisticsSending; }
    public void setStatisticsSending(@Nullable Boolean setterArg) {
      this.statisticsSending = setterArg;
    }

    private @Nullable PreloadInfoPigeon preloadInfo;
    public @Nullable PreloadInfoPigeon getPreloadInfo() { return preloadInfo; }
    public void setPreloadInfo(@Nullable PreloadInfoPigeon setterArg) {
      this.preloadInfo = setterArg;
    }

    private @Nullable Long maxReportsInDatabaseCount;
    public @Nullable Long getMaxReportsInDatabaseCount() { return maxReportsInDatabaseCount; }
    public void setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
      this.maxReportsInDatabaseCount = setterArg;
    }

    private @Nullable Boolean nativeCrashReporting;
    public @Nullable Boolean getNativeCrashReporting() { return nativeCrashReporting; }
    public void setNativeCrashReporting(@Nullable Boolean setterArg) {
      this.nativeCrashReporting = setterArg;
    }

    private @Nullable Boolean sessionsAutoTracking;
    public @Nullable Boolean getSessionsAutoTracking() { return sessionsAutoTracking; }
    public void setSessionsAutoTracking(@Nullable Boolean setterArg) {
      this.sessionsAutoTracking = setterArg;
    }

    private @Nullable Map<String, String> errorEnvironment;
    public @Nullable Map<String, String> getErrorEnvironment() { return errorEnvironment; }
    public void setErrorEnvironment(@Nullable Map<String, String> setterArg) {
      this.errorEnvironment = setterArg;
    }

    private @Nullable String userProfileID;
    public @Nullable String getUserProfileID() { return userProfileID; }
    public void setUserProfileID(@Nullable String setterArg) {
      this.userProfileID = setterArg;
    }

    private @Nullable Boolean revenueAutoTracking;
    public @Nullable Boolean getRevenueAutoTracking() { return revenueAutoTracking; }
    public void setRevenueAutoTracking(@Nullable Boolean setterArg) {
      this.revenueAutoTracking = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppMetricaConfigPigeon() {}
    public static final class Builder {
      private @Nullable String apiKey;
      public @NonNull Builder setApiKey(@NonNull String setterArg) {
        this.apiKey = setterArg;
        return this;
      }
      private @Nullable String appVersion;
      public @NonNull Builder setAppVersion(@Nullable String setterArg) {
        this.appVersion = setterArg;
        return this;
      }
      private @Nullable Boolean crashReporting;
      public @NonNull Builder setCrashReporting(@Nullable Boolean setterArg) {
        this.crashReporting = setterArg;
        return this;
      }
      private @Nullable Boolean firstActivationAsUpdate;
      public @NonNull Builder setFirstActivationAsUpdate(@Nullable Boolean setterArg) {
        this.firstActivationAsUpdate = setterArg;
        return this;
      }
      private @Nullable LocationPigeon location;
      public @NonNull Builder setLocation(@Nullable LocationPigeon setterArg) {
        this.location = setterArg;
        return this;
      }
      private @Nullable Boolean locationTracking;
      public @NonNull Builder setLocationTracking(@Nullable Boolean setterArg) {
        this.locationTracking = setterArg;
        return this;
      }
      private @Nullable Boolean logs;
      public @NonNull Builder setLogs(@Nullable Boolean setterArg) {
        this.logs = setterArg;
        return this;
      }
      private @Nullable Long sessionTimeout;
      public @NonNull Builder setSessionTimeout(@Nullable Long setterArg) {
        this.sessionTimeout = setterArg;
        return this;
      }
      private @Nullable Boolean statisticsSending;
      public @NonNull Builder setStatisticsSending(@Nullable Boolean setterArg) {
        this.statisticsSending = setterArg;
        return this;
      }
      private @Nullable PreloadInfoPigeon preloadInfo;
      public @NonNull Builder setPreloadInfo(@Nullable PreloadInfoPigeon setterArg) {
        this.preloadInfo = setterArg;
        return this;
      }
      private @Nullable Long maxReportsInDatabaseCount;
      public @NonNull Builder setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
        this.maxReportsInDatabaseCount = setterArg;
        return this;
      }
      private @Nullable Boolean nativeCrashReporting;
      public @NonNull Builder setNativeCrashReporting(@Nullable Boolean setterArg) {
        this.nativeCrashReporting = setterArg;
        return this;
      }
      private @Nullable Boolean sessionsAutoTracking;
      public @NonNull Builder setSessionsAutoTracking(@Nullable Boolean setterArg) {
        this.sessionsAutoTracking = setterArg;
        return this;
      }
      private @Nullable Map<String, String> errorEnvironment;
      public @NonNull Builder setErrorEnvironment(@Nullable Map<String, String> setterArg) {
        this.errorEnvironment = setterArg;
        return this;
      }
      private @Nullable String userProfileID;
      public @NonNull Builder setUserProfileID(@Nullable String setterArg) {
        this.userProfileID = setterArg;
        return this;
      }
      private @Nullable Boolean revenueAutoTracking;
      public @NonNull Builder setRevenueAutoTracking(@Nullable Boolean setterArg) {
        this.revenueAutoTracking = setterArg;
        return this;
      }
      public @NonNull AppMetricaConfigPigeon build() {
        AppMetricaConfigPigeon pigeonReturn = new AppMetricaConfigPigeon();
        pigeonReturn.setApiKey(apiKey);
        pigeonReturn.setAppVersion(appVersion);
        pigeonReturn.setCrashReporting(crashReporting);
        pigeonReturn.setFirstActivationAsUpdate(firstActivationAsUpdate);
        pigeonReturn.setLocation(location);
        pigeonReturn.setLocationTracking(locationTracking);
        pigeonReturn.setLogs(logs);
        pigeonReturn.setSessionTimeout(sessionTimeout);
        pigeonReturn.setStatisticsSending(statisticsSending);
        pigeonReturn.setPreloadInfo(preloadInfo);
        pigeonReturn.setMaxReportsInDatabaseCount(maxReportsInDatabaseCount);
        pigeonReturn.setNativeCrashReporting(nativeCrashReporting);
        pigeonReturn.setSessionsAutoTracking(sessionsAutoTracking);
        pigeonReturn.setErrorEnvironment(errorEnvironment);
        pigeonReturn.setUserProfileID(userProfileID);
        pigeonReturn.setRevenueAutoTracking(revenueAutoTracking);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apiKey", apiKey);
      toMapResult.put("appVersion", appVersion);
      toMapResult.put("crashReporting", crashReporting);
      toMapResult.put("firstActivationAsUpdate", firstActivationAsUpdate);
      toMapResult.put("location", (location == null) ? null : location.toMap());
      toMapResult.put("locationTracking", locationTracking);
      toMapResult.put("logs", logs);
      toMapResult.put("sessionTimeout", sessionTimeout);
      toMapResult.put("statisticsSending", statisticsSending);
      toMapResult.put("preloadInfo", (preloadInfo == null) ? null : preloadInfo.toMap());
      toMapResult.put("maxReportsInDatabaseCount", maxReportsInDatabaseCount);
      toMapResult.put("nativeCrashReporting", nativeCrashReporting);
      toMapResult.put("sessionsAutoTracking", sessionsAutoTracking);
      toMapResult.put("errorEnvironment", errorEnvironment);
      toMapResult.put("userProfileID", userProfileID);
      toMapResult.put("revenueAutoTracking", revenueAutoTracking);
      return toMapResult;
    }
    static @NonNull AppMetricaConfigPigeon fromMap(@NonNull Map<String, Object> map) {
      AppMetricaConfigPigeon pigeonResult = new AppMetricaConfigPigeon();
      Object apiKey = map.get("apiKey");
      pigeonResult.setApiKey((String)apiKey);
      Object appVersion = map.get("appVersion");
      pigeonResult.setAppVersion((String)appVersion);
      Object crashReporting = map.get("crashReporting");
      pigeonResult.setCrashReporting((Boolean)crashReporting);
      Object firstActivationAsUpdate = map.get("firstActivationAsUpdate");
      pigeonResult.setFirstActivationAsUpdate((Boolean)firstActivationAsUpdate);
      Object location = map.get("location");
      pigeonResult.setLocation((location == null) ? null : LocationPigeon.fromMap((Map)location));
      Object locationTracking = map.get("locationTracking");
      pigeonResult.setLocationTracking((Boolean)locationTracking);
      Object logs = map.get("logs");
      pigeonResult.setLogs((Boolean)logs);
      Object sessionTimeout = map.get("sessionTimeout");
      pigeonResult.setSessionTimeout((sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer)sessionTimeout : (Long)sessionTimeout));
      Object statisticsSending = map.get("statisticsSending");
      pigeonResult.setStatisticsSending((Boolean)statisticsSending);
      Object preloadInfo = map.get("preloadInfo");
      pigeonResult.setPreloadInfo((preloadInfo == null) ? null : PreloadInfoPigeon.fromMap((Map)preloadInfo));
      Object maxReportsInDatabaseCount = map.get("maxReportsInDatabaseCount");
      pigeonResult.setMaxReportsInDatabaseCount((maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer)maxReportsInDatabaseCount : (Long)maxReportsInDatabaseCount));
      Object nativeCrashReporting = map.get("nativeCrashReporting");
      pigeonResult.setNativeCrashReporting((Boolean)nativeCrashReporting);
      Object sessionsAutoTracking = map.get("sessionsAutoTracking");
      pigeonResult.setSessionsAutoTracking((Boolean)sessionsAutoTracking);
      Object errorEnvironment = map.get("errorEnvironment");
      pigeonResult.setErrorEnvironment((Map<String, String>)errorEnvironment);
      Object userProfileID = map.get("userProfileID");
      pigeonResult.setUserProfileID((String)userProfileID);
      Object revenueAutoTracking = map.get("revenueAutoTracking");
      pigeonResult.setRevenueAutoTracking((Boolean)revenueAutoTracking);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class LocationPigeon {
    private @NonNull Double latitude;
    public @NonNull Double getLatitude() { return latitude; }
    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;
    public @NonNull Double getLongitude() { return longitude; }
    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    private @Nullable String provider;
    public @Nullable String getProvider() { return provider; }
    public void setProvider(@Nullable String setterArg) {
      this.provider = setterArg;
    }

    private @Nullable Double altitude;
    public @Nullable Double getAltitude() { return altitude; }
    public void setAltitude(@Nullable Double setterArg) {
      this.altitude = setterArg;
    }

    private @Nullable Double accuracy;
    public @Nullable Double getAccuracy() { return accuracy; }
    public void setAccuracy(@Nullable Double setterArg) {
      this.accuracy = setterArg;
    }

    private @Nullable Double course;
    public @Nullable Double getCourse() { return course; }
    public void setCourse(@Nullable Double setterArg) {
      this.course = setterArg;
    }

    private @Nullable Double speed;
    public @Nullable Double getSpeed() { return speed; }
    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    private @Nullable Long timestamp;
    public @Nullable Long getTimestamp() { return timestamp; }
    public void setTimestamp(@Nullable Long setterArg) {
      this.timestamp = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private LocationPigeon() {}
    public static final class Builder {
      private @Nullable Double latitude;
      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }
      private @Nullable Double longitude;
      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }
      private @Nullable String provider;
      public @NonNull Builder setProvider(@Nullable String setterArg) {
        this.provider = setterArg;
        return this;
      }
      private @Nullable Double altitude;
      public @NonNull Builder setAltitude(@Nullable Double setterArg) {
        this.altitude = setterArg;
        return this;
      }
      private @Nullable Double accuracy;
      public @NonNull Builder setAccuracy(@Nullable Double setterArg) {
        this.accuracy = setterArg;
        return this;
      }
      private @Nullable Double course;
      public @NonNull Builder setCourse(@Nullable Double setterArg) {
        this.course = setterArg;
        return this;
      }
      private @Nullable Double speed;
      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }
      private @Nullable Long timestamp;
      public @NonNull Builder setTimestamp(@Nullable Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }
      public @NonNull LocationPigeon build() {
        LocationPigeon pigeonReturn = new LocationPigeon();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setProvider(provider);
        pigeonReturn.setAltitude(altitude);
        pigeonReturn.setAccuracy(accuracy);
        pigeonReturn.setCourse(course);
        pigeonReturn.setSpeed(speed);
        pigeonReturn.setTimestamp(timestamp);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("latitude", latitude);
      toMapResult.put("longitude", longitude);
      toMapResult.put("provider", provider);
      toMapResult.put("altitude", altitude);
      toMapResult.put("accuracy", accuracy);
      toMapResult.put("course", course);
      toMapResult.put("speed", speed);
      toMapResult.put("timestamp", timestamp);
      return toMapResult;
    }
    static @NonNull LocationPigeon fromMap(@NonNull Map<String, Object> map) {
      LocationPigeon pigeonResult = new LocationPigeon();
      Object latitude = map.get("latitude");
      pigeonResult.setLatitude((Double)latitude);
      Object longitude = map.get("longitude");
      pigeonResult.setLongitude((Double)longitude);
      Object provider = map.get("provider");
      pigeonResult.setProvider((String)provider);
      Object altitude = map.get("altitude");
      pigeonResult.setAltitude((Double)altitude);
      Object accuracy = map.get("accuracy");
      pigeonResult.setAccuracy((Double)accuracy);
      Object course = map.get("course");
      pigeonResult.setCourse((Double)course);
      Object speed = map.get("speed");
      pigeonResult.setSpeed((Double)speed);
      Object timestamp = map.get("timestamp");
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer)timestamp : (Long)timestamp));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PreloadInfoPigeon {
    private @NonNull String trackingId;
    public @NonNull String getTrackingId() { return trackingId; }
    public void setTrackingId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"trackingId\" is null.");
      }
      this.trackingId = setterArg;
    }

    private @Nullable Map<Object, Object> additionalInfo;
    public @Nullable Map<Object, Object> getAdditionalInfo() { return additionalInfo; }
    public void setAdditionalInfo(@Nullable Map<Object, Object> setterArg) {
      this.additionalInfo = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PreloadInfoPigeon() {}
    public static final class Builder {
      private @Nullable String trackingId;
      public @NonNull Builder setTrackingId(@NonNull String setterArg) {
        this.trackingId = setterArg;
        return this;
      }
      private @Nullable Map<Object, Object> additionalInfo;
      public @NonNull Builder setAdditionalInfo(@Nullable Map<Object, Object> setterArg) {
        this.additionalInfo = setterArg;
        return this;
      }
      public @NonNull PreloadInfoPigeon build() {
        PreloadInfoPigeon pigeonReturn = new PreloadInfoPigeon();
        pigeonReturn.setTrackingId(trackingId);
        pigeonReturn.setAdditionalInfo(additionalInfo);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("trackingId", trackingId);
      toMapResult.put("additionalInfo", additionalInfo);
      return toMapResult;
    }
    static @NonNull PreloadInfoPigeon fromMap(@NonNull Map<String, Object> map) {
      PreloadInfoPigeon pigeonResult = new PreloadInfoPigeon();
      Object trackingId = map.get("trackingId");
      pigeonResult.setTrackingId((String)trackingId);
      Object additionalInfo = map.get("additionalInfo");
      pigeonResult.setAdditionalInfo((Map<Object, Object>)additionalInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkErrorPigeon {
    private @NonNull AppMetricaDeferredDeeplinkReasonPigeon reason;
    public @NonNull AppMetricaDeferredDeeplinkReasonPigeon getReason() { return reason; }
    public void setReason(@NonNull AppMetricaDeferredDeeplinkReasonPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reason\" is null.");
      }
      this.reason = setterArg;
    }

    private @NonNull String description;
    public @NonNull String getDescription() { return description; }
    public void setDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"description\" is null.");
      }
      this.description = setterArg;
    }

    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppMetricaDeferredDeeplinkErrorPigeon() {}
    public static final class Builder {
      private @Nullable AppMetricaDeferredDeeplinkReasonPigeon reason;
      public @NonNull Builder setReason(@NonNull AppMetricaDeferredDeeplinkReasonPigeon setterArg) {
        this.reason = setterArg;
        return this;
      }
      private @Nullable String description;
      public @NonNull Builder setDescription(@NonNull String setterArg) {
        this.description = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      public @NonNull AppMetricaDeferredDeeplinkErrorPigeon build() {
        AppMetricaDeferredDeeplinkErrorPigeon pigeonReturn = new AppMetricaDeferredDeeplinkErrorPigeon();
        pigeonReturn.setReason(reason);
        pigeonReturn.setDescription(description);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("reason", reason == null ? null : reason.index);
      toMapResult.put("description", description);
      toMapResult.put("message", message);
      return toMapResult;
    }
    static @NonNull AppMetricaDeferredDeeplinkErrorPigeon fromMap(@NonNull Map<String, Object> map) {
      AppMetricaDeferredDeeplinkErrorPigeon pigeonResult = new AppMetricaDeferredDeeplinkErrorPigeon();
      Object reason = map.get("reason");
      pigeonResult.setReason(reason == null ? null : AppMetricaDeferredDeeplinkReasonPigeon.values()[(int)reason]);
      Object description = map.get("description");
      pigeonResult.setDescription((String)description);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkPigeon {
    private @Nullable String deeplink;
    public @Nullable String getDeeplink() { return deeplink; }
    public void setDeeplink(@Nullable String setterArg) {
      this.deeplink = setterArg;
    }

    private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;
    public @Nullable AppMetricaDeferredDeeplinkErrorPigeon getError() { return error; }
    public void setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {
      private @Nullable String deeplink;
      public @NonNull Builder setDeeplink(@Nullable String setterArg) {
        this.deeplink = setterArg;
        return this;
      }
      private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;
      public @NonNull Builder setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull AppMetricaDeferredDeeplinkPigeon build() {
        AppMetricaDeferredDeeplinkPigeon pigeonReturn = new AppMetricaDeferredDeeplinkPigeon();
        pigeonReturn.setDeeplink(deeplink);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deeplink", deeplink);
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static @NonNull AppMetricaDeferredDeeplinkPigeon fromMap(@NonNull Map<String, Object> map) {
      AppMetricaDeferredDeeplinkPigeon pigeonResult = new AppMetricaDeferredDeeplinkPigeon();
      Object deeplink = map.get("deeplink");
      pigeonResult.setDeeplink((String)deeplink);
      Object error = map.get("error");
      pigeonResult.setError((error == null) ? null : AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map)error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeferredDeeplinkParametersPigeon {
    private @Nullable Map<Object, Object> parameters;
    public @Nullable Map<Object, Object> getParameters() { return parameters; }
    public void setParameters(@Nullable Map<Object, Object> setterArg) {
      this.parameters = setterArg;
    }

    private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;
    public @Nullable AppMetricaDeferredDeeplinkErrorPigeon getError() { return error; }
    public void setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {
      private @Nullable Map<Object, Object> parameters;
      public @NonNull Builder setParameters(@Nullable Map<Object, Object> setterArg) {
        this.parameters = setterArg;
        return this;
      }
      private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;
      public @NonNull Builder setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
        this.error = setterArg;
        return this;
      }
      public @NonNull AppMetricaDeferredDeeplinkParametersPigeon build() {
        AppMetricaDeferredDeeplinkParametersPigeon pigeonReturn = new AppMetricaDeferredDeeplinkParametersPigeon();
        pigeonReturn.setParameters(parameters);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("parameters", parameters);
      toMapResult.put("error", (error == null) ? null : error.toMap());
      return toMapResult;
    }
    static @NonNull AppMetricaDeferredDeeplinkParametersPigeon fromMap(@NonNull Map<String, Object> map) {
      AppMetricaDeferredDeeplinkParametersPigeon pigeonResult = new AppMetricaDeferredDeeplinkParametersPigeon();
      Object parameters = map.get("parameters");
      pigeonResult.setParameters((Map<Object, Object>)parameters);
      Object error = map.get("error");
      pigeonResult.setError((error == null) ? null : AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map)error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class AppMetricaDeviceIdPigeon {
    private @Nullable String deviceId;
    public @Nullable String getDeviceId() { return deviceId; }
    public void setDeviceId(@Nullable String setterArg) {
      this.deviceId = setterArg;
    }

    private @NonNull AppMetricaDeviceIdReasonPigeon errorReason;
    public @NonNull AppMetricaDeviceIdReasonPigeon getErrorReason() { return errorReason; }
    public void setErrorReason(@NonNull AppMetricaDeviceIdReasonPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"errorReason\" is null.");
      }
      this.errorReason = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private AppMetricaDeviceIdPigeon() {}
    public static final class Builder {
      private @Nullable String deviceId;
      public @NonNull Builder setDeviceId(@Nullable String setterArg) {
        this.deviceId = setterArg;
        return this;
      }
      private @Nullable AppMetricaDeviceIdReasonPigeon errorReason;
      public @NonNull Builder setErrorReason(@NonNull AppMetricaDeviceIdReasonPigeon setterArg) {
        this.errorReason = setterArg;
        return this;
      }
      public @NonNull AppMetricaDeviceIdPigeon build() {
        AppMetricaDeviceIdPigeon pigeonReturn = new AppMetricaDeviceIdPigeon();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setErrorReason(errorReason);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("deviceId", deviceId);
      toMapResult.put("errorReason", errorReason == null ? null : errorReason.index);
      return toMapResult;
    }
    static @NonNull AppMetricaDeviceIdPigeon fromMap(@NonNull Map<String, Object> map) {
      AppMetricaDeviceIdPigeon pigeonResult = new AppMetricaDeviceIdPigeon();
      Object deviceId = map.get("deviceId");
      pigeonResult.setDeviceId((String)deviceId);
      Object errorReason = map.get("errorReason");
      pigeonResult.setErrorReason(errorReason == null ? null : AppMetricaDeviceIdReasonPigeon.values()[(int)errorReason]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class RevenuePigeon {
    private @NonNull String price;
    public @NonNull String getPrice() { return price; }
    public void setPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"price\" is null.");
      }
      this.price = setterArg;
    }

    private @NonNull String currency;
    public @NonNull String getCurrency() { return currency; }
    public void setCurrency(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currency\" is null.");
      }
      this.currency = setterArg;
    }

    private @Nullable Long quantity;
    public @Nullable Long getQuantity() { return quantity; }
    public void setQuantity(@Nullable Long setterArg) {
      this.quantity = setterArg;
    }

    private @Nullable String productId;
    public @Nullable String getProductId() { return productId; }
    public void setProductId(@Nullable String setterArg) {
      this.productId = setterArg;
    }

    private @Nullable String payload;
    public @Nullable String getPayload() { return payload; }
    public void setPayload(@Nullable String setterArg) {
      this.payload = setterArg;
    }

    private @Nullable ReceiptPigeon receipt;
    public @Nullable ReceiptPigeon getReceipt() { return receipt; }
    public void setReceipt(@Nullable ReceiptPigeon setterArg) {
      this.receipt = setterArg;
    }

    private @Nullable String transactionId;
    public @Nullable String getTransactionId() { return transactionId; }
    public void setTransactionId(@Nullable String setterArg) {
      this.transactionId = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private RevenuePigeon() {}
    public static final class Builder {
      private @Nullable String price;
      public @NonNull Builder setPrice(@NonNull String setterArg) {
        this.price = setterArg;
        return this;
      }
      private @Nullable String currency;
      public @NonNull Builder setCurrency(@NonNull String setterArg) {
        this.currency = setterArg;
        return this;
      }
      private @Nullable Long quantity;
      public @NonNull Builder setQuantity(@Nullable Long setterArg) {
        this.quantity = setterArg;
        return this;
      }
      private @Nullable String productId;
      public @NonNull Builder setProductId(@Nullable String setterArg) {
        this.productId = setterArg;
        return this;
      }
      private @Nullable String payload;
      public @NonNull Builder setPayload(@Nullable String setterArg) {
        this.payload = setterArg;
        return this;
      }
      private @Nullable ReceiptPigeon receipt;
      public @NonNull Builder setReceipt(@Nullable ReceiptPigeon setterArg) {
        this.receipt = setterArg;
        return this;
      }
      private @Nullable String transactionId;
      public @NonNull Builder setTransactionId(@Nullable String setterArg) {
        this.transactionId = setterArg;
        return this;
      }
      public @NonNull RevenuePigeon build() {
        RevenuePigeon pigeonReturn = new RevenuePigeon();
        pigeonReturn.setPrice(price);
        pigeonReturn.setCurrency(currency);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setPayload(payload);
        pigeonReturn.setReceipt(receipt);
        pigeonReturn.setTransactionId(transactionId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("price", price);
      toMapResult.put("currency", currency);
      toMapResult.put("quantity", quantity);
      toMapResult.put("productId", productId);
      toMapResult.put("payload", payload);
      toMapResult.put("receipt", (receipt == null) ? null : receipt.toMap());
      toMapResult.put("transactionId", transactionId);
      return toMapResult;
    }
    static @NonNull RevenuePigeon fromMap(@NonNull Map<String, Object> map) {
      RevenuePigeon pigeonResult = new RevenuePigeon();
      Object price = map.get("price");
      pigeonResult.setPrice((String)price);
      Object currency = map.get("currency");
      pigeonResult.setCurrency((String)currency);
      Object quantity = map.get("quantity");
      pigeonResult.setQuantity((quantity == null) ? null : ((quantity instanceof Integer) ? (Integer)quantity : (Long)quantity));
      Object productId = map.get("productId");
      pigeonResult.setProductId((String)productId);
      Object payload = map.get("payload");
      pigeonResult.setPayload((String)payload);
      Object receipt = map.get("receipt");
      pigeonResult.setReceipt((receipt == null) ? null : ReceiptPigeon.fromMap((Map)receipt));
      Object transactionId = map.get("transactionId");
      pigeonResult.setTransactionId((String)transactionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReceiptPigeon {
    private @Nullable String data;
    public @Nullable String getData() { return data; }
    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    private @Nullable String signature;
    public @Nullable String getSignature() { return signature; }
    public void setSignature(@Nullable String setterArg) {
      this.signature = setterArg;
    }

    public static final class Builder {
      private @Nullable String data;
      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }
      private @Nullable String signature;
      public @NonNull Builder setSignature(@Nullable String setterArg) {
        this.signature = setterArg;
        return this;
      }
      public @NonNull ReceiptPigeon build() {
        ReceiptPigeon pigeonReturn = new ReceiptPigeon();
        pigeonReturn.setData(data);
        pigeonReturn.setSignature(signature);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("data", data);
      toMapResult.put("signature", signature);
      return toMapResult;
    }
    static @NonNull ReceiptPigeon fromMap(@NonNull Map<String, Object> map) {
      ReceiptPigeon pigeonResult = new ReceiptPigeon();
      Object data = map.get("data");
      pigeonResult.setData((String)data);
      Object signature = map.get("signature");
      pigeonResult.setSignature((String)signature);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceAmountPigeon {
    private @NonNull String amount;
    public @NonNull String getAmount() { return amount; }
    public void setAmount(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"amount\" is null.");
      }
      this.amount = setterArg;
    }

    private @NonNull String currency;
    public @NonNull String getCurrency() { return currency; }
    public void setCurrency(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currency\" is null.");
      }
      this.currency = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommerceAmountPigeon() {}
    public static final class Builder {
      private @Nullable String amount;
      public @NonNull Builder setAmount(@NonNull String setterArg) {
        this.amount = setterArg;
        return this;
      }
      private @Nullable String currency;
      public @NonNull Builder setCurrency(@NonNull String setterArg) {
        this.currency = setterArg;
        return this;
      }
      public @NonNull ECommerceAmountPigeon build() {
        ECommerceAmountPigeon pigeonReturn = new ECommerceAmountPigeon();
        pigeonReturn.setAmount(amount);
        pigeonReturn.setCurrency(currency);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("amount", amount);
      toMapResult.put("currency", currency);
      return toMapResult;
    }
    static @NonNull ECommerceAmountPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceAmountPigeon pigeonResult = new ECommerceAmountPigeon();
      Object amount = map.get("amount");
      pigeonResult.setAmount((String)amount);
      Object currency = map.get("currency");
      pigeonResult.setCurrency((String)currency);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceProductPigeon {
    private @NonNull String sku;
    public @NonNull String getSku() { return sku; }
    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable List<String> categoriesPath;
    public @Nullable List<String> getCategoriesPath() { return categoriesPath; }
    public void setCategoriesPath(@Nullable List<String> setterArg) {
      this.categoriesPath = setterArg;
    }

    private @Nullable Map<String, String> payload;
    public @Nullable Map<String, String> getPayload() { return payload; }
    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    private @Nullable ECommercePricePigeon actualPrice;
    public @Nullable ECommercePricePigeon getActualPrice() { return actualPrice; }
    public void setActualPrice(@Nullable ECommercePricePigeon setterArg) {
      this.actualPrice = setterArg;
    }

    private @Nullable ECommercePricePigeon originalPrice;
    public @Nullable ECommercePricePigeon getOriginalPrice() { return originalPrice; }
    public void setOriginalPrice(@Nullable ECommercePricePigeon setterArg) {
      this.originalPrice = setterArg;
    }

    private @Nullable List<String> promocodes;
    public @Nullable List<String> getPromocodes() { return promocodes; }
    public void setPromocodes(@Nullable List<String> setterArg) {
      this.promocodes = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommerceProductPigeon() {}
    public static final class Builder {
      private @Nullable String sku;
      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable List<String> categoriesPath;
      public @NonNull Builder setCategoriesPath(@Nullable List<String> setterArg) {
        this.categoriesPath = setterArg;
        return this;
      }
      private @Nullable Map<String, String> payload;
      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }
      private @Nullable ECommercePricePigeon actualPrice;
      public @NonNull Builder setActualPrice(@Nullable ECommercePricePigeon setterArg) {
        this.actualPrice = setterArg;
        return this;
      }
      private @Nullable ECommercePricePigeon originalPrice;
      public @NonNull Builder setOriginalPrice(@Nullable ECommercePricePigeon setterArg) {
        this.originalPrice = setterArg;
        return this;
      }
      private @Nullable List<String> promocodes;
      public @NonNull Builder setPromocodes(@Nullable List<String> setterArg) {
        this.promocodes = setterArg;
        return this;
      }
      public @NonNull ECommerceProductPigeon build() {
        ECommerceProductPigeon pigeonReturn = new ECommerceProductPigeon();
        pigeonReturn.setSku(sku);
        pigeonReturn.setName(name);
        pigeonReturn.setCategoriesPath(categoriesPath);
        pigeonReturn.setPayload(payload);
        pigeonReturn.setActualPrice(actualPrice);
        pigeonReturn.setOriginalPrice(originalPrice);
        pigeonReturn.setPromocodes(promocodes);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("sku", sku);
      toMapResult.put("name", name);
      toMapResult.put("categoriesPath", categoriesPath);
      toMapResult.put("payload", payload);
      toMapResult.put("actualPrice", (actualPrice == null) ? null : actualPrice.toMap());
      toMapResult.put("originalPrice", (originalPrice == null) ? null : originalPrice.toMap());
      toMapResult.put("promocodes", promocodes);
      return toMapResult;
    }
    static @NonNull ECommerceProductPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceProductPigeon pigeonResult = new ECommerceProductPigeon();
      Object sku = map.get("sku");
      pigeonResult.setSku((String)sku);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object categoriesPath = map.get("categoriesPath");
      pigeonResult.setCategoriesPath((List<String>)categoriesPath);
      Object payload = map.get("payload");
      pigeonResult.setPayload((Map<String, String>)payload);
      Object actualPrice = map.get("actualPrice");
      pigeonResult.setActualPrice((actualPrice == null) ? null : ECommercePricePigeon.fromMap((Map)actualPrice));
      Object originalPrice = map.get("originalPrice");
      pigeonResult.setOriginalPrice((originalPrice == null) ? null : ECommercePricePigeon.fromMap((Map)originalPrice));
      Object promocodes = map.get("promocodes");
      pigeonResult.setPromocodes((List<String>)promocodes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommercePricePigeon {
    private @NonNull ECommerceAmountPigeon fiat;
    public @NonNull ECommerceAmountPigeon getFiat() { return fiat; }
    public void setFiat(@NonNull ECommerceAmountPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fiat\" is null.");
      }
      this.fiat = setterArg;
    }

    private @Nullable List<ECommerceAmountPigeon> internalComponents;
    public @Nullable List<ECommerceAmountPigeon> getInternalComponents() { return internalComponents; }
    public void setInternalComponents(@Nullable List<ECommerceAmountPigeon> setterArg) {
      this.internalComponents = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommercePricePigeon() {}
    public static final class Builder {
      private @Nullable ECommerceAmountPigeon fiat;
      public @NonNull Builder setFiat(@NonNull ECommerceAmountPigeon setterArg) {
        this.fiat = setterArg;
        return this;
      }
      private @Nullable List<ECommerceAmountPigeon> internalComponents;
      public @NonNull Builder setInternalComponents(@Nullable List<ECommerceAmountPigeon> setterArg) {
        this.internalComponents = setterArg;
        return this;
      }
      public @NonNull ECommercePricePigeon build() {
        ECommercePricePigeon pigeonReturn = new ECommercePricePigeon();
        pigeonReturn.setFiat(fiat);
        pigeonReturn.setInternalComponents(internalComponents);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("fiat", (fiat == null) ? null : fiat.toMap());
      toMapResult.put("internalComponents", internalComponents);
      return toMapResult;
    }
    static @NonNull ECommercePricePigeon fromMap(@NonNull Map<String, Object> map) {
      ECommercePricePigeon pigeonResult = new ECommercePricePigeon();
      Object fiat = map.get("fiat");
      pigeonResult.setFiat((fiat == null) ? null : ECommerceAmountPigeon.fromMap((Map)fiat));
      Object internalComponents = map.get("internalComponents");
      pigeonResult.setInternalComponents((List<ECommerceAmountPigeon>)internalComponents);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceReferrerPigeon {
    private @Nullable String type;
    public @Nullable String getType() { return type; }
    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String identifier;
    public @Nullable String getIdentifier() { return identifier; }
    public void setIdentifier(@Nullable String setterArg) {
      this.identifier = setterArg;
    }

    private @Nullable ECommerceScreenPigeon screen;
    public @Nullable ECommerceScreenPigeon getScreen() { return screen; }
    public void setScreen(@Nullable ECommerceScreenPigeon setterArg) {
      this.screen = setterArg;
    }

    public static final class Builder {
      private @Nullable String type;
      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }
      private @Nullable String identifier;
      public @NonNull Builder setIdentifier(@Nullable String setterArg) {
        this.identifier = setterArg;
        return this;
      }
      private @Nullable ECommerceScreenPigeon screen;
      public @NonNull Builder setScreen(@Nullable ECommerceScreenPigeon setterArg) {
        this.screen = setterArg;
        return this;
      }
      public @NonNull ECommerceReferrerPigeon build() {
        ECommerceReferrerPigeon pigeonReturn = new ECommerceReferrerPigeon();
        pigeonReturn.setType(type);
        pigeonReturn.setIdentifier(identifier);
        pigeonReturn.setScreen(screen);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("type", type);
      toMapResult.put("identifier", identifier);
      toMapResult.put("screen", (screen == null) ? null : screen.toMap());
      return toMapResult;
    }
    static @NonNull ECommerceReferrerPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceReferrerPigeon pigeonResult = new ECommerceReferrerPigeon();
      Object type = map.get("type");
      pigeonResult.setType((String)type);
      Object identifier = map.get("identifier");
      pigeonResult.setIdentifier((String)identifier);
      Object screen = map.get("screen");
      pigeonResult.setScreen((screen == null) ? null : ECommerceScreenPigeon.fromMap((Map)screen));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceScreenPigeon {
    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable List<String> categoriesPath;
    public @Nullable List<String> getCategoriesPath() { return categoriesPath; }
    public void setCategoriesPath(@Nullable List<String> setterArg) {
      this.categoriesPath = setterArg;
    }

    private @Nullable String searchQuery;
    public @Nullable String getSearchQuery() { return searchQuery; }
    public void setSearchQuery(@Nullable String setterArg) {
      this.searchQuery = setterArg;
    }

    private @Nullable Map<String, String> payload;
    public @Nullable Map<String, String> getPayload() { return payload; }
    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    public static final class Builder {
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable List<String> categoriesPath;
      public @NonNull Builder setCategoriesPath(@Nullable List<String> setterArg) {
        this.categoriesPath = setterArg;
        return this;
      }
      private @Nullable String searchQuery;
      public @NonNull Builder setSearchQuery(@Nullable String setterArg) {
        this.searchQuery = setterArg;
        return this;
      }
      private @Nullable Map<String, String> payload;
      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }
      public @NonNull ECommerceScreenPigeon build() {
        ECommerceScreenPigeon pigeonReturn = new ECommerceScreenPigeon();
        pigeonReturn.setName(name);
        pigeonReturn.setCategoriesPath(categoriesPath);
        pigeonReturn.setSearchQuery(searchQuery);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("categoriesPath", categoriesPath);
      toMapResult.put("searchQuery", searchQuery);
      toMapResult.put("payload", payload);
      return toMapResult;
    }
    static @NonNull ECommerceScreenPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceScreenPigeon pigeonResult = new ECommerceScreenPigeon();
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object categoriesPath = map.get("categoriesPath");
      pigeonResult.setCategoriesPath((List<String>)categoriesPath);
      Object searchQuery = map.get("searchQuery");
      pigeonResult.setSearchQuery((String)searchQuery);
      Object payload = map.get("payload");
      pigeonResult.setPayload((Map<String, String>)payload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceCartItemPigeon {
    private @NonNull ECommerceProductPigeon product;
    public @NonNull ECommerceProductPigeon getProduct() { return product; }
    public void setProduct(@NonNull ECommerceProductPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"product\" is null.");
      }
      this.product = setterArg;
    }

    private @NonNull String quantity;
    public @NonNull String getQuantity() { return quantity; }
    public void setQuantity(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"quantity\" is null.");
      }
      this.quantity = setterArg;
    }

    private @NonNull ECommercePricePigeon revenue;
    public @NonNull ECommercePricePigeon getRevenue() { return revenue; }
    public void setRevenue(@NonNull ECommercePricePigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"revenue\" is null.");
      }
      this.revenue = setterArg;
    }

    private @Nullable ECommerceReferrerPigeon referrer;
    public @Nullable ECommerceReferrerPigeon getReferrer() { return referrer; }
    public void setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
      this.referrer = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommerceCartItemPigeon() {}
    public static final class Builder {
      private @Nullable ECommerceProductPigeon product;
      public @NonNull Builder setProduct(@NonNull ECommerceProductPigeon setterArg) {
        this.product = setterArg;
        return this;
      }
      private @Nullable String quantity;
      public @NonNull Builder setQuantity(@NonNull String setterArg) {
        this.quantity = setterArg;
        return this;
      }
      private @Nullable ECommercePricePigeon revenue;
      public @NonNull Builder setRevenue(@NonNull ECommercePricePigeon setterArg) {
        this.revenue = setterArg;
        return this;
      }
      private @Nullable ECommerceReferrerPigeon referrer;
      public @NonNull Builder setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
        this.referrer = setterArg;
        return this;
      }
      public @NonNull ECommerceCartItemPigeon build() {
        ECommerceCartItemPigeon pigeonReturn = new ECommerceCartItemPigeon();
        pigeonReturn.setProduct(product);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setRevenue(revenue);
        pigeonReturn.setReferrer(referrer);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("product", (product == null) ? null : product.toMap());
      toMapResult.put("quantity", quantity);
      toMapResult.put("revenue", (revenue == null) ? null : revenue.toMap());
      toMapResult.put("referrer", (referrer == null) ? null : referrer.toMap());
      return toMapResult;
    }
    static @NonNull ECommerceCartItemPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceCartItemPigeon pigeonResult = new ECommerceCartItemPigeon();
      Object product = map.get("product");
      pigeonResult.setProduct((product == null) ? null : ECommerceProductPigeon.fromMap((Map)product));
      Object quantity = map.get("quantity");
      pigeonResult.setQuantity((String)quantity);
      Object revenue = map.get("revenue");
      pigeonResult.setRevenue((revenue == null) ? null : ECommercePricePigeon.fromMap((Map)revenue));
      Object referrer = map.get("referrer");
      pigeonResult.setReferrer((referrer == null) ? null : ECommerceReferrerPigeon.fromMap((Map)referrer));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceOrderPigeon {
    private @NonNull String identifier;
    public @NonNull String getIdentifier() { return identifier; }
    public void setIdentifier(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"identifier\" is null.");
      }
      this.identifier = setterArg;
    }

    private @NonNull List<ECommerceCartItemPigeon> items;
    public @NonNull List<ECommerceCartItemPigeon> getItems() { return items; }
    public void setItems(@NonNull List<ECommerceCartItemPigeon> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"items\" is null.");
      }
      this.items = setterArg;
    }

    private @Nullable Map<String, String> payload;
    public @Nullable Map<String, String> getPayload() { return payload; }
    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommerceOrderPigeon() {}
    public static final class Builder {
      private @Nullable String identifier;
      public @NonNull Builder setIdentifier(@NonNull String setterArg) {
        this.identifier = setterArg;
        return this;
      }
      private @Nullable List<ECommerceCartItemPigeon> items;
      public @NonNull Builder setItems(@NonNull List<ECommerceCartItemPigeon> setterArg) {
        this.items = setterArg;
        return this;
      }
      private @Nullable Map<String, String> payload;
      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }
      public @NonNull ECommerceOrderPigeon build() {
        ECommerceOrderPigeon pigeonReturn = new ECommerceOrderPigeon();
        pigeonReturn.setIdentifier(identifier);
        pigeonReturn.setItems(items);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("identifier", identifier);
      toMapResult.put("items", items);
      toMapResult.put("payload", payload);
      return toMapResult;
    }
    static @NonNull ECommerceOrderPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceOrderPigeon pigeonResult = new ECommerceOrderPigeon();
      Object identifier = map.get("identifier");
      pigeonResult.setIdentifier((String)identifier);
      Object items = map.get("items");
      pigeonResult.setItems((List<ECommerceCartItemPigeon>)items);
      Object payload = map.get("payload");
      pigeonResult.setPayload((Map<String, String>)payload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ECommerceEventPigeon {
    private @NonNull String eventType;
    public @NonNull String getEventType() { return eventType; }
    public void setEventType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"eventType\" is null.");
      }
      this.eventType = setterArg;
    }

    private @Nullable ECommerceCartItemPigeon cartItem;
    public @Nullable ECommerceCartItemPigeon getCartItem() { return cartItem; }
    public void setCartItem(@Nullable ECommerceCartItemPigeon setterArg) {
      this.cartItem = setterArg;
    }

    private @Nullable ECommerceOrderPigeon order;
    public @Nullable ECommerceOrderPigeon getOrder() { return order; }
    public void setOrder(@Nullable ECommerceOrderPigeon setterArg) {
      this.order = setterArg;
    }

    private @Nullable ECommerceProductPigeon product;
    public @Nullable ECommerceProductPigeon getProduct() { return product; }
    public void setProduct(@Nullable ECommerceProductPigeon setterArg) {
      this.product = setterArg;
    }

    private @Nullable ECommerceReferrerPigeon referrer;
    public @Nullable ECommerceReferrerPigeon getReferrer() { return referrer; }
    public void setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
      this.referrer = setterArg;
    }

    private @Nullable ECommerceScreenPigeon screen;
    public @Nullable ECommerceScreenPigeon getScreen() { return screen; }
    public void setScreen(@Nullable ECommerceScreenPigeon setterArg) {
      this.screen = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ECommerceEventPigeon() {}
    public static final class Builder {
      private @Nullable String eventType;
      public @NonNull Builder setEventType(@NonNull String setterArg) {
        this.eventType = setterArg;
        return this;
      }
      private @Nullable ECommerceCartItemPigeon cartItem;
      public @NonNull Builder setCartItem(@Nullable ECommerceCartItemPigeon setterArg) {
        this.cartItem = setterArg;
        return this;
      }
      private @Nullable ECommerceOrderPigeon order;
      public @NonNull Builder setOrder(@Nullable ECommerceOrderPigeon setterArg) {
        this.order = setterArg;
        return this;
      }
      private @Nullable ECommerceProductPigeon product;
      public @NonNull Builder setProduct(@Nullable ECommerceProductPigeon setterArg) {
        this.product = setterArg;
        return this;
      }
      private @Nullable ECommerceReferrerPigeon referrer;
      public @NonNull Builder setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
        this.referrer = setterArg;
        return this;
      }
      private @Nullable ECommerceScreenPigeon screen;
      public @NonNull Builder setScreen(@Nullable ECommerceScreenPigeon setterArg) {
        this.screen = setterArg;
        return this;
      }
      public @NonNull ECommerceEventPigeon build() {
        ECommerceEventPigeon pigeonReturn = new ECommerceEventPigeon();
        pigeonReturn.setEventType(eventType);
        pigeonReturn.setCartItem(cartItem);
        pigeonReturn.setOrder(order);
        pigeonReturn.setProduct(product);
        pigeonReturn.setReferrer(referrer);
        pigeonReturn.setScreen(screen);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("eventType", eventType);
      toMapResult.put("cartItem", (cartItem == null) ? null : cartItem.toMap());
      toMapResult.put("order", (order == null) ? null : order.toMap());
      toMapResult.put("product", (product == null) ? null : product.toMap());
      toMapResult.put("referrer", (referrer == null) ? null : referrer.toMap());
      toMapResult.put("screen", (screen == null) ? null : screen.toMap());
      return toMapResult;
    }
    static @NonNull ECommerceEventPigeon fromMap(@NonNull Map<String, Object> map) {
      ECommerceEventPigeon pigeonResult = new ECommerceEventPigeon();
      Object eventType = map.get("eventType");
      pigeonResult.setEventType((String)eventType);
      Object cartItem = map.get("cartItem");
      pigeonResult.setCartItem((cartItem == null) ? null : ECommerceCartItemPigeon.fromMap((Map)cartItem));
      Object order = map.get("order");
      pigeonResult.setOrder((order == null) ? null : ECommerceOrderPigeon.fromMap((Map)order));
      Object product = map.get("product");
      pigeonResult.setProduct((product == null) ? null : ECommerceProductPigeon.fromMap((Map)product));
      Object referrer = map.get("referrer");
      pigeonResult.setReferrer((referrer == null) ? null : ECommerceReferrerPigeon.fromMap((Map)referrer));
      Object screen = map.get("screen");
      pigeonResult.setScreen((screen == null) ? null : ECommerceScreenPigeon.fromMap((Map)screen));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StackTraceElementPigeon {
    private @NonNull String className;
    public @NonNull String getClassName() { return className; }
    public void setClassName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"className\" is null.");
      }
      this.className = setterArg;
    }

    private @Nullable String fileName;
    public @Nullable String getFileName() { return fileName; }
    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @NonNull Long line;
    public @NonNull Long getLine() { return line; }
    public void setLine(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"line\" is null.");
      }
      this.line = setterArg;
    }

    private @NonNull Long column;
    public @NonNull Long getColumn() { return column; }
    public void setColumn(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"column\" is null.");
      }
      this.column = setterArg;
    }

    private @NonNull String methodName;
    public @NonNull String getMethodName() { return methodName; }
    public void setMethodName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"methodName\" is null.");
      }
      this.methodName = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StackTraceElementPigeon() {}
    public static final class Builder {
      private @Nullable String className;
      public @NonNull Builder setClassName(@NonNull String setterArg) {
        this.className = setterArg;
        return this;
      }
      private @Nullable String fileName;
      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }
      private @Nullable Long line;
      public @NonNull Builder setLine(@NonNull Long setterArg) {
        this.line = setterArg;
        return this;
      }
      private @Nullable Long column;
      public @NonNull Builder setColumn(@NonNull Long setterArg) {
        this.column = setterArg;
        return this;
      }
      private @Nullable String methodName;
      public @NonNull Builder setMethodName(@NonNull String setterArg) {
        this.methodName = setterArg;
        return this;
      }
      public @NonNull StackTraceElementPigeon build() {
        StackTraceElementPigeon pigeonReturn = new StackTraceElementPigeon();
        pigeonReturn.setClassName(className);
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setLine(line);
        pigeonReturn.setColumn(column);
        pigeonReturn.setMethodName(methodName);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("className", className);
      toMapResult.put("fileName", fileName);
      toMapResult.put("line", line);
      toMapResult.put("column", column);
      toMapResult.put("methodName", methodName);
      return toMapResult;
    }
    static @NonNull StackTraceElementPigeon fromMap(@NonNull Map<String, Object> map) {
      StackTraceElementPigeon pigeonResult = new StackTraceElementPigeon();
      Object className = map.get("className");
      pigeonResult.setClassName((String)className);
      Object fileName = map.get("fileName");
      pigeonResult.setFileName((String)fileName);
      Object line = map.get("line");
      pigeonResult.setLine((line == null) ? null : ((line instanceof Integer) ? (Integer)line : (Long)line));
      Object column = map.get("column");
      pigeonResult.setColumn((column == null) ? null : ((column instanceof Integer) ? (Integer)column : (Long)column));
      Object methodName = map.get("methodName");
      pigeonResult.setMethodName((String)methodName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ErrorDetailsPigeon {
    private @NonNull String exceptionClass;
    public @NonNull String getExceptionClass() { return exceptionClass; }
    public void setExceptionClass(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"exceptionClass\" is null.");
      }
      this.exceptionClass = setterArg;
    }

    private @Nullable String message;
    public @Nullable String getMessage() { return message; }
    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    private @NonNull String dartVersion;
    public @NonNull String getDartVersion() { return dartVersion; }
    public void setDartVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dartVersion\" is null.");
      }
      this.dartVersion = setterArg;
    }

    private @Nullable List<StackTraceElementPigeon> backtrace;
    public @Nullable List<StackTraceElementPigeon> getBacktrace() { return backtrace; }
    public void setBacktrace(@Nullable List<StackTraceElementPigeon> setterArg) {
      this.backtrace = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ErrorDetailsPigeon() {}
    public static final class Builder {
      private @Nullable String exceptionClass;
      public @NonNull Builder setExceptionClass(@NonNull String setterArg) {
        this.exceptionClass = setterArg;
        return this;
      }
      private @Nullable String message;
      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }
      private @Nullable String dartVersion;
      public @NonNull Builder setDartVersion(@NonNull String setterArg) {
        this.dartVersion = setterArg;
        return this;
      }
      private @Nullable List<StackTraceElementPigeon> backtrace;
      public @NonNull Builder setBacktrace(@Nullable List<StackTraceElementPigeon> setterArg) {
        this.backtrace = setterArg;
        return this;
      }
      public @NonNull ErrorDetailsPigeon build() {
        ErrorDetailsPigeon pigeonReturn = new ErrorDetailsPigeon();
        pigeonReturn.setExceptionClass(exceptionClass);
        pigeonReturn.setMessage(message);
        pigeonReturn.setDartVersion(dartVersion);
        pigeonReturn.setBacktrace(backtrace);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("exceptionClass", exceptionClass);
      toMapResult.put("message", message);
      toMapResult.put("dartVersion", dartVersion);
      toMapResult.put("backtrace", backtrace);
      return toMapResult;
    }
    static @NonNull ErrorDetailsPigeon fromMap(@NonNull Map<String, Object> map) {
      ErrorDetailsPigeon pigeonResult = new ErrorDetailsPigeon();
      Object exceptionClass = map.get("exceptionClass");
      pigeonResult.setExceptionClass((String)exceptionClass);
      Object message = map.get("message");
      pigeonResult.setMessage((String)message);
      Object dartVersion = map.get("dartVersion");
      pigeonResult.setDartVersion((String)dartVersion);
      Object backtrace = map.get("backtrace");
      pigeonResult.setBacktrace((List<StackTraceElementPigeon>)backtrace);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserProfileAttributePigeon {
    private @NonNull String key;
    public @NonNull String getKey() { return key; }
    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @Nullable Double doubleValue;
    public @Nullable Double getDoubleValue() { return doubleValue; }
    public void setDoubleValue(@Nullable Double setterArg) {
      this.doubleValue = setterArg;
    }

    private @Nullable String stringValue;
    public @Nullable String getStringValue() { return stringValue; }
    public void setStringValue(@Nullable String setterArg) {
      this.stringValue = setterArg;
    }

    private @Nullable Boolean boolValue;
    public @Nullable Boolean getBoolValue() { return boolValue; }
    public void setBoolValue(@Nullable Boolean setterArg) {
      this.boolValue = setterArg;
    }

    private @Nullable Long year;
    public @Nullable Long getYear() { return year; }
    public void setYear(@Nullable Long setterArg) {
      this.year = setterArg;
    }

    private @Nullable Long month;
    public @Nullable Long getMonth() { return month; }
    public void setMonth(@Nullable Long setterArg) {
      this.month = setterArg;
    }

    private @Nullable Long day;
    public @Nullable Long getDay() { return day; }
    public void setDay(@Nullable Long setterArg) {
      this.day = setterArg;
    }

    private @Nullable Long age;
    public @Nullable Long getAge() { return age; }
    public void setAge(@Nullable Long setterArg) {
      this.age = setterArg;
    }

    private @Nullable GenderPigeon genderValue;
    public @Nullable GenderPigeon getGenderValue() { return genderValue; }
    public void setGenderValue(@Nullable GenderPigeon setterArg) {
      this.genderValue = setterArg;
    }

    private @Nullable Boolean ifUndefined;
    public @Nullable Boolean getIfUndefined() { return ifUndefined; }
    public void setIfUndefined(@Nullable Boolean setterArg) {
      this.ifUndefined = setterArg;
    }

    private @Nullable Boolean reset;
    public @Nullable Boolean getReset() { return reset; }
    public void setReset(@Nullable Boolean setterArg) {
      this.reset = setterArg;
    }

    private @Nullable UserProfileAttributeType type;
    public @Nullable UserProfileAttributeType getType() { return type; }
    public void setType(@Nullable UserProfileAttributeType setterArg) {
      this.type = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private UserProfileAttributePigeon() {}
    public static final class Builder {
      private @Nullable String key;
      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }
      private @Nullable Double doubleValue;
      public @NonNull Builder setDoubleValue(@Nullable Double setterArg) {
        this.doubleValue = setterArg;
        return this;
      }
      private @Nullable String stringValue;
      public @NonNull Builder setStringValue(@Nullable String setterArg) {
        this.stringValue = setterArg;
        return this;
      }
      private @Nullable Boolean boolValue;
      public @NonNull Builder setBoolValue(@Nullable Boolean setterArg) {
        this.boolValue = setterArg;
        return this;
      }
      private @Nullable Long year;
      public @NonNull Builder setYear(@Nullable Long setterArg) {
        this.year = setterArg;
        return this;
      }
      private @Nullable Long month;
      public @NonNull Builder setMonth(@Nullable Long setterArg) {
        this.month = setterArg;
        return this;
      }
      private @Nullable Long day;
      public @NonNull Builder setDay(@Nullable Long setterArg) {
        this.day = setterArg;
        return this;
      }
      private @Nullable Long age;
      public @NonNull Builder setAge(@Nullable Long setterArg) {
        this.age = setterArg;
        return this;
      }
      private @Nullable GenderPigeon genderValue;
      public @NonNull Builder setGenderValue(@Nullable GenderPigeon setterArg) {
        this.genderValue = setterArg;
        return this;
      }
      private @Nullable Boolean ifUndefined;
      public @NonNull Builder setIfUndefined(@Nullable Boolean setterArg) {
        this.ifUndefined = setterArg;
        return this;
      }
      private @Nullable Boolean reset;
      public @NonNull Builder setReset(@Nullable Boolean setterArg) {
        this.reset = setterArg;
        return this;
      }
      private @Nullable UserProfileAttributeType type;
      public @NonNull Builder setType(@Nullable UserProfileAttributeType setterArg) {
        this.type = setterArg;
        return this;
      }
      public @NonNull UserProfileAttributePigeon build() {
        UserProfileAttributePigeon pigeonReturn = new UserProfileAttributePigeon();
        pigeonReturn.setKey(key);
        pigeonReturn.setDoubleValue(doubleValue);
        pigeonReturn.setStringValue(stringValue);
        pigeonReturn.setBoolValue(boolValue);
        pigeonReturn.setYear(year);
        pigeonReturn.setMonth(month);
        pigeonReturn.setDay(day);
        pigeonReturn.setAge(age);
        pigeonReturn.setGenderValue(genderValue);
        pigeonReturn.setIfUndefined(ifUndefined);
        pigeonReturn.setReset(reset);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("key", key);
      toMapResult.put("doubleValue", doubleValue);
      toMapResult.put("stringValue", stringValue);
      toMapResult.put("boolValue", boolValue);
      toMapResult.put("year", year);
      toMapResult.put("month", month);
      toMapResult.put("day", day);
      toMapResult.put("age", age);
      toMapResult.put("genderValue", genderValue == null ? null : genderValue.index);
      toMapResult.put("ifUndefined", ifUndefined);
      toMapResult.put("reset", reset);
      toMapResult.put("type", type == null ? null : type.index);
      return toMapResult;
    }
    static @NonNull UserProfileAttributePigeon fromMap(@NonNull Map<String, Object> map) {
      UserProfileAttributePigeon pigeonResult = new UserProfileAttributePigeon();
      Object key = map.get("key");
      pigeonResult.setKey((String)key);
      Object doubleValue = map.get("doubleValue");
      pigeonResult.setDoubleValue((Double)doubleValue);
      Object stringValue = map.get("stringValue");
      pigeonResult.setStringValue((String)stringValue);
      Object boolValue = map.get("boolValue");
      pigeonResult.setBoolValue((Boolean)boolValue);
      Object year = map.get("year");
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer)year : (Long)year));
      Object month = map.get("month");
      pigeonResult.setMonth((month == null) ? null : ((month instanceof Integer) ? (Integer)month : (Long)month));
      Object day = map.get("day");
      pigeonResult.setDay((day == null) ? null : ((day instanceof Integer) ? (Integer)day : (Long)day));
      Object age = map.get("age");
      pigeonResult.setAge((age == null) ? null : ((age instanceof Integer) ? (Integer)age : (Long)age));
      Object genderValue = map.get("genderValue");
      pigeonResult.setGenderValue(genderValue == null ? null : GenderPigeon.values()[(int)genderValue]);
      Object ifUndefined = map.get("ifUndefined");
      pigeonResult.setIfUndefined((Boolean)ifUndefined);
      Object reset = map.get("reset");
      pigeonResult.setReset((Boolean)reset);
      Object type = map.get("type");
      pigeonResult.setType(type == null ? null : UserProfileAttributeType.values()[(int)type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class UserProfilePigeon {
    private @NonNull List<UserProfileAttributePigeon> attributes;
    public @NonNull List<UserProfileAttributePigeon> getAttributes() { return attributes; }
    public void setAttributes(@NonNull List<UserProfileAttributePigeon> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"attributes\" is null.");
      }
      this.attributes = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private UserProfilePigeon() {}
    public static final class Builder {
      private @Nullable List<UserProfileAttributePigeon> attributes;
      public @NonNull Builder setAttributes(@NonNull List<UserProfileAttributePigeon> setterArg) {
        this.attributes = setterArg;
        return this;
      }
      public @NonNull UserProfilePigeon build() {
        UserProfilePigeon pigeonReturn = new UserProfilePigeon();
        pigeonReturn.setAttributes(attributes);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("attributes", attributes);
      return toMapResult;
    }
    static @NonNull UserProfilePigeon fromMap(@NonNull Map<String, Object> map) {
      UserProfilePigeon pigeonResult = new UserProfilePigeon();
      Object attributes = map.get("attributes");
      pigeonResult.setAttributes((List<UserProfileAttributePigeon>)attributes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReporterConfigPigeon {
    private @NonNull String apiKey;
    public @NonNull String getApiKey() { return apiKey; }
    public void setApiKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiKey\" is null.");
      }
      this.apiKey = setterArg;
    }

    private @Nullable Long sessionTimeout;
    public @Nullable Long getSessionTimeout() { return sessionTimeout; }
    public void setSessionTimeout(@Nullable Long setterArg) {
      this.sessionTimeout = setterArg;
    }

    private @Nullable Boolean statisticsSending;
    public @Nullable Boolean getStatisticsSending() { return statisticsSending; }
    public void setStatisticsSending(@Nullable Boolean setterArg) {
      this.statisticsSending = setterArg;
    }

    private @Nullable Long maxReportsInDatabaseCount;
    public @Nullable Long getMaxReportsInDatabaseCount() { return maxReportsInDatabaseCount; }
    public void setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
      this.maxReportsInDatabaseCount = setterArg;
    }

    private @Nullable String userProfileID;
    public @Nullable String getUserProfileID() { return userProfileID; }
    public void setUserProfileID(@Nullable String setterArg) {
      this.userProfileID = setterArg;
    }

    private @Nullable Boolean logs;
    public @Nullable Boolean getLogs() { return logs; }
    public void setLogs(@Nullable Boolean setterArg) {
      this.logs = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ReporterConfigPigeon() {}
    public static final class Builder {
      private @Nullable String apiKey;
      public @NonNull Builder setApiKey(@NonNull String setterArg) {
        this.apiKey = setterArg;
        return this;
      }
      private @Nullable Long sessionTimeout;
      public @NonNull Builder setSessionTimeout(@Nullable Long setterArg) {
        this.sessionTimeout = setterArg;
        return this;
      }
      private @Nullable Boolean statisticsSending;
      public @NonNull Builder setStatisticsSending(@Nullable Boolean setterArg) {
        this.statisticsSending = setterArg;
        return this;
      }
      private @Nullable Long maxReportsInDatabaseCount;
      public @NonNull Builder setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
        this.maxReportsInDatabaseCount = setterArg;
        return this;
      }
      private @Nullable String userProfileID;
      public @NonNull Builder setUserProfileID(@Nullable String setterArg) {
        this.userProfileID = setterArg;
        return this;
      }
      private @Nullable Boolean logs;
      public @NonNull Builder setLogs(@Nullable Boolean setterArg) {
        this.logs = setterArg;
        return this;
      }
      public @NonNull ReporterConfigPigeon build() {
        ReporterConfigPigeon pigeonReturn = new ReporterConfigPigeon();
        pigeonReturn.setApiKey(apiKey);
        pigeonReturn.setSessionTimeout(sessionTimeout);
        pigeonReturn.setStatisticsSending(statisticsSending);
        pigeonReturn.setMaxReportsInDatabaseCount(maxReportsInDatabaseCount);
        pigeonReturn.setUserProfileID(userProfileID);
        pigeonReturn.setLogs(logs);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("apiKey", apiKey);
      toMapResult.put("sessionTimeout", sessionTimeout);
      toMapResult.put("statisticsSending", statisticsSending);
      toMapResult.put("maxReportsInDatabaseCount", maxReportsInDatabaseCount);
      toMapResult.put("userProfileID", userProfileID);
      toMapResult.put("logs", logs);
      return toMapResult;
    }
    static @NonNull ReporterConfigPigeon fromMap(@NonNull Map<String, Object> map) {
      ReporterConfigPigeon pigeonResult = new ReporterConfigPigeon();
      Object apiKey = map.get("apiKey");
      pigeonResult.setApiKey((String)apiKey);
      Object sessionTimeout = map.get("sessionTimeout");
      pigeonResult.setSessionTimeout((sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer)sessionTimeout : (Long)sessionTimeout));
      Object statisticsSending = map.get("statisticsSending");
      pigeonResult.setStatisticsSending((Boolean)statisticsSending);
      Object maxReportsInDatabaseCount = map.get("maxReportsInDatabaseCount");
      pigeonResult.setMaxReportsInDatabaseCount((maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer)maxReportsInDatabaseCount : (Long)maxReportsInDatabaseCount));
      Object userProfileID = map.get("userProfileID");
      pigeonResult.setUserProfileID((String)userProfileID);
      Object logs = map.get("logs");
      pigeonResult.setLogs((Boolean)logs);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class AppMetricaConfigConverterPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaConfigConverterPigeonCodec INSTANCE = new AppMetricaConfigConverterPigeonCodec();
    private AppMetricaConfigConverterPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppMetricaConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return LocationPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return PreloadInfoPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppMetricaConfigPigeon) {
        stream.write(128);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toMap());
      } else 
      if (value instanceof LocationPigeon) {
        stream.write(129);
        writeValue(stream, ((LocationPigeon) value).toMap());
      } else 
      if (value instanceof PreloadInfoPigeon) {
        stream.write(130);
        writeValue(stream, ((PreloadInfoPigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppMetricaConfigConverterPigeon {
    @NonNull String toJson(@NonNull AppMetricaConfigPigeon config);

    /** The codec used by AppMetricaConfigConverterPigeon. */
    static MessageCodec<Object> getCodec() {
      return AppMetricaConfigConverterPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `AppMetricaConfigConverterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppMetricaConfigConverterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaConfigConverterPigeon.toJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              String output = api.toJson(configArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class AppMetricaPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaPigeonCodec INSTANCE = new AppMetricaPigeonCodec();
    private AppMetricaPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return AppMetricaConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return AppMetricaDeferredDeeplinkErrorPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return AppMetricaDeferredDeeplinkParametersPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return AppMetricaDeferredDeeplinkPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return AppMetricaDeviceIdPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return ECommerceCartItemPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return ECommerceEventPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ECommerceOrderPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return ECommerceReferrerPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return ECommerceScreenPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)146:         
          return LocationPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)147:         
          return PreloadInfoPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)148:         
          return ReceiptPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)149:         
          return ReporterConfigPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)150:         
          return RevenuePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)151:         
          return StackTraceElementPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)152:         
          return UserProfileAttributePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)153:         
          return UserProfilePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof AppMetricaConfigPigeon) {
        stream.write(128);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkErrorPigeon) {
        stream.write(129);
        writeValue(stream, ((AppMetricaDeferredDeeplinkErrorPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkParametersPigeon) {
        stream.write(130);
        writeValue(stream, ((AppMetricaDeferredDeeplinkParametersPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeferredDeeplinkPigeon) {
        stream.write(131);
        writeValue(stream, ((AppMetricaDeferredDeeplinkPigeon) value).toMap());
      } else 
      if (value instanceof AppMetricaDeviceIdPigeon) {
        stream.write(132);
        writeValue(stream, ((AppMetricaDeviceIdPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(133);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(134);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceCartItemPigeon) {
        stream.write(135);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceEventPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceEventPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceOrderPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceOrderPigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(138);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(139);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(140);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(141);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceReferrerPigeon) {
        stream.write(142);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceScreenPigeon) {
        stream.write(143);
        writeValue(stream, ((ECommerceScreenPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(144);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(145);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof LocationPigeon) {
        stream.write(146);
        writeValue(stream, ((LocationPigeon) value).toMap());
      } else 
      if (value instanceof PreloadInfoPigeon) {
        stream.write(147);
        writeValue(stream, ((PreloadInfoPigeon) value).toMap());
      } else 
      if (value instanceof ReceiptPigeon) {
        stream.write(148);
        writeValue(stream, ((ReceiptPigeon) value).toMap());
      } else 
      if (value instanceof ReporterConfigPigeon) {
        stream.write(149);
        writeValue(stream, ((ReporterConfigPigeon) value).toMap());
      } else 
      if (value instanceof RevenuePigeon) {
        stream.write(150);
        writeValue(stream, ((RevenuePigeon) value).toMap());
      } else 
      if (value instanceof StackTraceElementPigeon) {
        stream.write(151);
        writeValue(stream, ((StackTraceElementPigeon) value).toMap());
      } else 
      if (value instanceof UserProfileAttributePigeon) {
        stream.write(152);
        writeValue(stream, ((UserProfileAttributePigeon) value).toMap());
      } else 
      if (value instanceof UserProfilePigeon) {
        stream.write(153);
        writeValue(stream, ((UserProfilePigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface AppMetricaPigeon {
    void activate(@NonNull AppMetricaConfigPigeon config);
    void activateReporter(@NonNull ReporterConfigPigeon config);
    void touchReporter(@NonNull String apiKey);
    @NonNull Long getLibraryApiLevel();
    @NonNull String getLibraryVersion();
    void resumeSession();
    void pauseSession();
    void reportAppOpen(@NonNull String deeplink);
    void reportError(@NonNull ErrorDetailsPigeon error, @Nullable String message);
    void reportErrorWithGroup(@NonNull String groupId, @Nullable ErrorDetailsPigeon error, @Nullable String message);
    void reportUnhandledException(@NonNull ErrorDetailsPigeon error);
    void reportEventWithJson(@NonNull String eventName, @Nullable String attributesJson);
    void reportEvent(@NonNull String eventName);
    void reportReferralUrl(@NonNull String referralUrl);
    void requestDeferredDeeplink(Result<AppMetricaDeferredDeeplinkPigeon> result);
    void requestDeferredDeeplinkParameters(Result<AppMetricaDeferredDeeplinkParametersPigeon> result);
    void requestAppMetricaDeviceID(Result<AppMetricaDeviceIdPigeon> result);
    void sendEventsBuffer();
    void setLocation(@Nullable LocationPigeon location);
    void setLocationTracking(@NonNull Boolean enabled);
    void setStatisticsSending(@NonNull Boolean enabled);
    void setUserProfileID(@Nullable String userProfileID);
    void reportUserProfile(@NonNull UserProfilePigeon userProfile);
    void putErrorEnvironmentValue(@NonNull String key, @Nullable String value);
    void reportRevenue(@NonNull RevenuePigeon revenue);
    void reportECommerce(@NonNull ECommerceEventPigeon event);
    void handlePluginInitFinished();

    /** The codec used by AppMetricaPigeon. */
    static MessageCodec<Object> getCodec() {
      return AppMetricaPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `AppMetricaPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, AppMetricaPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.activate", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              api.activate(configArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.activateReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ReporterConfigPigeon configArg = (ReporterConfigPigeon)args.get(0);
              if (configArg == null) {
                throw new NullPointerException("configArg unexpectedly null.");
              }
              api.activateReporter(configArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.touchReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.touchReporter(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.getLibraryApiLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getLibraryApiLevel();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.getLibraryVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              String output = api.getLibraryVersion();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.resumeSession();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.pauseSession();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportAppOpen", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String deeplinkArg = (String)args.get(0);
              if (deeplinkArg == null) {
                throw new NullPointerException("deeplinkArg unexpectedly null.");
              }
              api.reportAppOpen(deeplinkArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(0);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              String messageArg = (String)args.get(1);
              api.reportError(errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String groupIdArg = (String)args.get(0);
              if (groupIdArg == null) {
                throw new NullPointerException("groupIdArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              String messageArg = (String)args.get(2);
              api.reportErrorWithGroup(groupIdArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(0);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              api.reportUnhandledException(errorArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String eventNameArg = (String)args.get(0);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              String attributesJsonArg = (String)args.get(1);
              api.reportEventWithJson(eventNameArg, attributesJsonArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String eventNameArg = (String)args.get(0);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              api.reportEvent(eventNameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportReferralUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String referralUrlArg = (String)args.get(0);
              if (referralUrlArg == null) {
                throw new NullPointerException("referralUrlArg unexpectedly null.");
              }
              api.reportReferralUrl(referralUrlArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplink", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeferredDeeplinkPigeon> resultCallback = new Result<AppMetricaDeferredDeeplinkPigeon>() {
                public void success(AppMetricaDeferredDeeplinkPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestDeferredDeeplink(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplinkParameters", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeferredDeeplinkParametersPigeon> resultCallback = new Result<AppMetricaDeferredDeeplinkParametersPigeon>() {
                public void success(AppMetricaDeferredDeeplinkParametersPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestDeferredDeeplinkParameters(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.requestAppMetricaDeviceID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<AppMetricaDeviceIdPigeon> resultCallback = new Result<AppMetricaDeviceIdPigeon>() {
                public void success(AppMetricaDeviceIdPigeon result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestAppMetricaDeviceID(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.sendEventsBuffer();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              LocationPigeon locationArg = (LocationPigeon)args.get(0);
              api.setLocation(locationArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setLocationTracking", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setLocationTracking(enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setStatisticsSending", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setStatisticsSending(enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String userProfileIDArg = (String)args.get(0);
              api.setUserProfileID(userProfileIDArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              UserProfilePigeon userProfileArg = (UserProfilePigeon)args.get(0);
              if (userProfileArg == null) {
                throw new NullPointerException("userProfileArg unexpectedly null.");
              }
              api.reportUserProfile(userProfileArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.putErrorEnvironmentValue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String keyArg = (String)args.get(0);
              if (keyArg == null) {
                throw new NullPointerException("keyArg unexpectedly null.");
              }
              String valueArg = (String)args.get(1);
              api.putErrorEnvironmentValue(keyArg, valueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              RevenuePigeon revenueArg = (RevenuePigeon)args.get(0);
              if (revenueArg == null) {
                throw new NullPointerException("revenueArg unexpectedly null.");
              }
              api.reportRevenue(revenueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ECommerceEventPigeon eventArg = (ECommerceEventPigeon)args.get(0);
              if (eventArg == null) {
                throw new NullPointerException("eventArg unexpectedly null.");
              }
              api.reportECommerce(eventArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.AppMetricaPigeon.handlePluginInitFinished", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.handlePluginInitFinished();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ReporterPigeonCodec extends StandardMessageCodec {
    public static final ReporterPigeonCodec INSTANCE = new ReporterPigeonCodec();
    private ReporterPigeonCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ECommerceAmountPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return ECommerceCartItemPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return ECommerceEventPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)132:         
          return ECommerceOrderPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)133:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)134:         
          return ECommercePricePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)135:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)136:         
          return ECommerceProductPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)137:         
          return ECommerceReferrerPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)138:         
          return ECommerceScreenPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)139:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)140:         
          return ErrorDetailsPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)141:         
          return ReceiptPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)142:         
          return RevenuePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)143:         
          return StackTraceElementPigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)144:         
          return UserProfileAttributePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)145:         
          return UserProfilePigeon.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(128);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceAmountPigeon) {
        stream.write(129);
        writeValue(stream, ((ECommerceAmountPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceCartItemPigeon) {
        stream.write(130);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceEventPigeon) {
        stream.write(131);
        writeValue(stream, ((ECommerceEventPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceOrderPigeon) {
        stream.write(132);
        writeValue(stream, ((ECommerceOrderPigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(133);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommercePricePigeon) {
        stream.write(134);
        writeValue(stream, ((ECommercePricePigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(135);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceProductPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceProductPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceReferrerPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toMap());
      } else 
      if (value instanceof ECommerceScreenPigeon) {
        stream.write(138);
        writeValue(stream, ((ECommerceScreenPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(139);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof ErrorDetailsPigeon) {
        stream.write(140);
        writeValue(stream, ((ErrorDetailsPigeon) value).toMap());
      } else 
      if (value instanceof ReceiptPigeon) {
        stream.write(141);
        writeValue(stream, ((ReceiptPigeon) value).toMap());
      } else 
      if (value instanceof RevenuePigeon) {
        stream.write(142);
        writeValue(stream, ((RevenuePigeon) value).toMap());
      } else 
      if (value instanceof StackTraceElementPigeon) {
        stream.write(143);
        writeValue(stream, ((StackTraceElementPigeon) value).toMap());
      } else 
      if (value instanceof UserProfileAttributePigeon) {
        stream.write(144);
        writeValue(stream, ((UserProfileAttributePigeon) value).toMap());
      } else 
      if (value instanceof UserProfilePigeon) {
        stream.write(145);
        writeValue(stream, ((UserProfilePigeon) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ReporterPigeon {
    void sendEventsBuffer(@NonNull String apiKey);
    void reportEvent(@NonNull String apiKey, @NonNull String eventName);
    void reportEventWithJson(@NonNull String apiKey, @NonNull String eventName, @Nullable String attributesJson);
    void reportError(@NonNull String apiKey, @NonNull ErrorDetailsPigeon error, @Nullable String message);
    void reportErrorWithGroup(@NonNull String apiKey, @NonNull String groupId, @Nullable ErrorDetailsPigeon error, @Nullable String message);
    void reportUnhandledException(@NonNull String apiKey, @NonNull ErrorDetailsPigeon error);
    void resumeSession(@NonNull String apiKey);
    void pauseSession(@NonNull String apiKey);
    void setStatisticsSending(@NonNull String apiKey, @NonNull Boolean enabled);
    void setUserProfileID(@NonNull String apiKey, @Nullable String userProfileID);
    void reportUserProfile(@NonNull String apiKey, @NonNull UserProfilePigeon userProfile);
    void reportRevenue(@NonNull String apiKey, @NonNull RevenuePigeon revenue);
    void reportECommerce(@NonNull String apiKey, @NonNull ECommerceEventPigeon event);

    /** The codec used by ReporterPigeon. */
    static MessageCodec<Object> getCodec() {
      return ReporterPigeonCodec.INSTANCE;
    }

    /** Sets up an instance of `ReporterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ReporterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.sendEventsBuffer(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String eventNameArg = (String)args.get(1);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              api.reportEvent(apiKeyArg, eventNameArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String eventNameArg = (String)args.get(1);
              if (eventNameArg == null) {
                throw new NullPointerException("eventNameArg unexpectedly null.");
              }
              String attributesJsonArg = (String)args.get(2);
              api.reportEventWithJson(apiKeyArg, eventNameArg, attributesJsonArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              String messageArg = (String)args.get(2);
              api.reportError(apiKeyArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String groupIdArg = (String)args.get(1);
              if (groupIdArg == null) {
                throw new NullPointerException("groupIdArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(2);
              String messageArg = (String)args.get(3);
              api.reportErrorWithGroup(apiKeyArg, groupIdArg, errorArg, messageArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon)args.get(1);
              if (errorArg == null) {
                throw new NullPointerException("errorArg unexpectedly null.");
              }
              api.reportUnhandledException(apiKeyArg, errorArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.resumeSession(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              api.pauseSession(apiKeyArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.setStatisticsSending", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              Boolean enabledArg = (Boolean)args.get(1);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              api.setStatisticsSending(apiKeyArg, enabledArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              String userProfileIDArg = (String)args.get(1);
              api.setUserProfileID(apiKeyArg, userProfileIDArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              UserProfilePigeon userProfileArg = (UserProfilePigeon)args.get(1);
              if (userProfileArg == null) {
                throw new NullPointerException("userProfileArg unexpectedly null.");
              }
              api.reportUserProfile(apiKeyArg, userProfileArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              RevenuePigeon revenueArg = (RevenuePigeon)args.get(1);
              if (revenueArg == null) {
                throw new NullPointerException("revenueArg unexpectedly null.");
              }
              api.reportRevenue(apiKeyArg, revenueArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ReporterPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String apiKeyArg = (String)args.get(0);
              if (apiKeyArg == null) {
                throw new NullPointerException("apiKeyArg unexpectedly null.");
              }
              ECommerceEventPigeon eventArg = (ECommerceEventPigeon)args.get(1);
              if (eventArg == null) {
                throw new NullPointerException("eventArg unexpectedly null.");
              }
              api.reportECommerce(apiKeyArg, eventArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
