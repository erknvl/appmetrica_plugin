// Autogenerated from Pigeon (v3.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "YMMFPigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface YMMFAppMetricaConfigPigeon ()
+ (YMMFAppMetricaConfigPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFLocationPigeon ()
+ (YMMFLocationPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFPreloadInfoPigeon ()
+ (YMMFPreloadInfoPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkErrorPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkErrorPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeferredDeeplinkParametersPigeon ()
+ (YMMFAppMetricaDeferredDeeplinkParametersPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFAppMetricaDeviceIdPigeon ()
+ (YMMFAppMetricaDeviceIdPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFRevenuePigeon ()
+ (YMMFRevenuePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFReceiptPigeon ()
+ (YMMFReceiptPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceAmountPigeon ()
+ (YMMFECommerceAmountPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceProductPigeon ()
+ (YMMFECommerceProductPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommercePricePigeon ()
+ (YMMFECommercePricePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceReferrerPigeon ()
+ (YMMFECommerceReferrerPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceScreenPigeon ()
+ (YMMFECommerceScreenPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceCartItemPigeon ()
+ (YMMFECommerceCartItemPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceOrderPigeon ()
+ (YMMFECommerceOrderPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFECommerceEventPigeon ()
+ (YMMFECommerceEventPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFStackTraceElementPigeon ()
+ (YMMFStackTraceElementPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFErrorDetailsPigeon ()
+ (YMMFErrorDetailsPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFUserProfileAttributePigeon ()
+ (YMMFUserProfileAttributePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFUserProfilePigeon ()
+ (YMMFUserProfilePigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface YMMFReporterConfigPigeon ()
+ (YMMFReporterConfigPigeon *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation YMMFAppMetricaConfigPigeon
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    appVersion:(nullable NSString *)appVersion
    crashReporting:(nullable NSNumber *)crashReporting
    firstActivationAsUpdate:(nullable NSNumber *)firstActivationAsUpdate
    location:(nullable YMMFLocationPigeon *)location
    locationTracking:(nullable NSNumber *)locationTracking
    logs:(nullable NSNumber *)logs
    sessionTimeout:(nullable NSNumber *)sessionTimeout
    statisticsSending:(nullable NSNumber *)statisticsSending
    preloadInfo:(nullable YMMFPreloadInfoPigeon *)preloadInfo
    maxReportsInDatabaseCount:(nullable NSNumber *)maxReportsInDatabaseCount
    nativeCrashReporting:(nullable NSNumber *)nativeCrashReporting
    sessionsAutoTracking:(nullable NSNumber *)sessionsAutoTracking
    errorEnvironment:(nullable NSDictionary<NSString *, NSString *> *)errorEnvironment
    userProfileID:(nullable NSString *)userProfileID
    revenueAutoTracking:(nullable NSNumber *)revenueAutoTracking {
  YMMFAppMetricaConfigPigeon* pigeonResult = [[YMMFAppMetricaConfigPigeon alloc] init];
  pigeonResult.apiKey = apiKey;
  pigeonResult.appVersion = appVersion;
  pigeonResult.crashReporting = crashReporting;
  pigeonResult.firstActivationAsUpdate = firstActivationAsUpdate;
  pigeonResult.location = location;
  pigeonResult.locationTracking = locationTracking;
  pigeonResult.logs = logs;
  pigeonResult.sessionTimeout = sessionTimeout;
  pigeonResult.statisticsSending = statisticsSending;
  pigeonResult.preloadInfo = preloadInfo;
  pigeonResult.maxReportsInDatabaseCount = maxReportsInDatabaseCount;
  pigeonResult.nativeCrashReporting = nativeCrashReporting;
  pigeonResult.sessionsAutoTracking = sessionsAutoTracking;
  pigeonResult.errorEnvironment = errorEnvironment;
  pigeonResult.userProfileID = userProfileID;
  pigeonResult.revenueAutoTracking = revenueAutoTracking;
  return pigeonResult;
}
+ (YMMFAppMetricaConfigPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFAppMetricaConfigPigeon *pigeonResult = [[YMMFAppMetricaConfigPigeon alloc] init];
  pigeonResult.apiKey = GetNullableObject(dict, @"apiKey");
  NSAssert(pigeonResult.apiKey != nil, @"");
  pigeonResult.appVersion = GetNullableObject(dict, @"appVersion");
  pigeonResult.crashReporting = GetNullableObject(dict, @"crashReporting");
  pigeonResult.firstActivationAsUpdate = GetNullableObject(dict, @"firstActivationAsUpdate");
  pigeonResult.location = [YMMFLocationPigeon fromMap:GetNullableObject(dict, @"location")];
  pigeonResult.locationTracking = GetNullableObject(dict, @"locationTracking");
  pigeonResult.logs = GetNullableObject(dict, @"logs");
  pigeonResult.sessionTimeout = GetNullableObject(dict, @"sessionTimeout");
  pigeonResult.statisticsSending = GetNullableObject(dict, @"statisticsSending");
  pigeonResult.preloadInfo = [YMMFPreloadInfoPigeon fromMap:GetNullableObject(dict, @"preloadInfo")];
  pigeonResult.maxReportsInDatabaseCount = GetNullableObject(dict, @"maxReportsInDatabaseCount");
  pigeonResult.nativeCrashReporting = GetNullableObject(dict, @"nativeCrashReporting");
  pigeonResult.sessionsAutoTracking = GetNullableObject(dict, @"sessionsAutoTracking");
  pigeonResult.errorEnvironment = GetNullableObject(dict, @"errorEnvironment");
  pigeonResult.userProfileID = GetNullableObject(dict, @"userProfileID");
  pigeonResult.revenueAutoTracking = GetNullableObject(dict, @"revenueAutoTracking");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"apiKey" : (self.apiKey ?: [NSNull null]),
    @"appVersion" : (self.appVersion ?: [NSNull null]),
    @"crashReporting" : (self.crashReporting ?: [NSNull null]),
    @"firstActivationAsUpdate" : (self.firstActivationAsUpdate ?: [NSNull null]),
    @"location" : (self.location ? [self.location toMap] : [NSNull null]),
    @"locationTracking" : (self.locationTracking ?: [NSNull null]),
    @"logs" : (self.logs ?: [NSNull null]),
    @"sessionTimeout" : (self.sessionTimeout ?: [NSNull null]),
    @"statisticsSending" : (self.statisticsSending ?: [NSNull null]),
    @"preloadInfo" : (self.preloadInfo ? [self.preloadInfo toMap] : [NSNull null]),
    @"maxReportsInDatabaseCount" : (self.maxReportsInDatabaseCount ?: [NSNull null]),
    @"nativeCrashReporting" : (self.nativeCrashReporting ?: [NSNull null]),
    @"sessionsAutoTracking" : (self.sessionsAutoTracking ?: [NSNull null]),
    @"errorEnvironment" : (self.errorEnvironment ?: [NSNull null]),
    @"userProfileID" : (self.userProfileID ?: [NSNull null]),
    @"revenueAutoTracking" : (self.revenueAutoTracking ?: [NSNull null]),
  };
}
@end

@implementation YMMFLocationPigeon
+ (instancetype)makeWithLatitude:(NSNumber *)latitude
    longitude:(NSNumber *)longitude
    provider:(nullable NSString *)provider
    altitude:(nullable NSNumber *)altitude
    accuracy:(nullable NSNumber *)accuracy
    course:(nullable NSNumber *)course
    speed:(nullable NSNumber *)speed
    timestamp:(nullable NSNumber *)timestamp {
  YMMFLocationPigeon* pigeonResult = [[YMMFLocationPigeon alloc] init];
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.provider = provider;
  pigeonResult.altitude = altitude;
  pigeonResult.accuracy = accuracy;
  pigeonResult.course = course;
  pigeonResult.speed = speed;
  pigeonResult.timestamp = timestamp;
  return pigeonResult;
}
+ (YMMFLocationPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFLocationPigeon *pigeonResult = [[YMMFLocationPigeon alloc] init];
  pigeonResult.latitude = GetNullableObject(dict, @"latitude");
  NSAssert(pigeonResult.latitude != nil, @"");
  pigeonResult.longitude = GetNullableObject(dict, @"longitude");
  NSAssert(pigeonResult.longitude != nil, @"");
  pigeonResult.provider = GetNullableObject(dict, @"provider");
  pigeonResult.altitude = GetNullableObject(dict, @"altitude");
  pigeonResult.accuracy = GetNullableObject(dict, @"accuracy");
  pigeonResult.course = GetNullableObject(dict, @"course");
  pigeonResult.speed = GetNullableObject(dict, @"speed");
  pigeonResult.timestamp = GetNullableObject(dict, @"timestamp");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"latitude" : (self.latitude ?: [NSNull null]),
    @"longitude" : (self.longitude ?: [NSNull null]),
    @"provider" : (self.provider ?: [NSNull null]),
    @"altitude" : (self.altitude ?: [NSNull null]),
    @"accuracy" : (self.accuracy ?: [NSNull null]),
    @"course" : (self.course ?: [NSNull null]),
    @"speed" : (self.speed ?: [NSNull null]),
    @"timestamp" : (self.timestamp ?: [NSNull null]),
  };
}
@end

@implementation YMMFPreloadInfoPigeon
+ (instancetype)makeWithTrackingId:(NSString *)trackingId
    additionalInfo:(nullable NSDictionary *)additionalInfo {
  YMMFPreloadInfoPigeon* pigeonResult = [[YMMFPreloadInfoPigeon alloc] init];
  pigeonResult.trackingId = trackingId;
  pigeonResult.additionalInfo = additionalInfo;
  return pigeonResult;
}
+ (YMMFPreloadInfoPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFPreloadInfoPigeon *pigeonResult = [[YMMFPreloadInfoPigeon alloc] init];
  pigeonResult.trackingId = GetNullableObject(dict, @"trackingId");
  NSAssert(pigeonResult.trackingId != nil, @"");
  pigeonResult.additionalInfo = GetNullableObject(dict, @"additionalInfo");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"trackingId" : (self.trackingId ?: [NSNull null]),
    @"additionalInfo" : (self.additionalInfo ?: [NSNull null]),
  };
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkErrorPigeon
+ (instancetype)makeWithReason:(YMMFAppMetricaDeferredDeeplinkReasonPigeon)reason
    description:(NSString *)description
    message:(nullable NSString *)message {
  YMMFAppMetricaDeferredDeeplinkErrorPigeon* pigeonResult = [[YMMFAppMetricaDeferredDeeplinkErrorPigeon alloc] init];
  pigeonResult.reason = reason;
  pigeonResult.description = description;
  pigeonResult.message = message;
  return pigeonResult;
}
+ (YMMFAppMetricaDeferredDeeplinkErrorPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFAppMetricaDeferredDeeplinkErrorPigeon *pigeonResult = [[YMMFAppMetricaDeferredDeeplinkErrorPigeon alloc] init];
  pigeonResult.reason = [GetNullableObject(dict, @"reason") integerValue];
  pigeonResult.description = GetNullableObject(dict, @"description");
  NSAssert(pigeonResult.description != nil, @"");
  pigeonResult.message = GetNullableObject(dict, @"message");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"reason" : @(self.reason),
    @"description" : (self.description ?: [NSNull null]),
    @"message" : (self.message ?: [NSNull null]),
  };
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkPigeon
+ (instancetype)makeWithDeeplink:(nullable NSString *)deeplink
    error:(nullable YMMFAppMetricaDeferredDeeplinkErrorPigeon *)error {
  YMMFAppMetricaDeferredDeeplinkPigeon* pigeonResult = [[YMMFAppMetricaDeferredDeeplinkPigeon alloc] init];
  pigeonResult.deeplink = deeplink;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (YMMFAppMetricaDeferredDeeplinkPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFAppMetricaDeferredDeeplinkPigeon *pigeonResult = [[YMMFAppMetricaDeferredDeeplinkPigeon alloc] init];
  pigeonResult.deeplink = GetNullableObject(dict, @"deeplink");
  pigeonResult.error = [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:GetNullableObject(dict, @"error")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"deeplink" : (self.deeplink ?: [NSNull null]),
    @"error" : (self.error ? [self.error toMap] : [NSNull null]),
  };
}
@end

@implementation YMMFAppMetricaDeferredDeeplinkParametersPigeon
+ (instancetype)makeWithParameters:(nullable NSDictionary *)parameters
    error:(nullable YMMFAppMetricaDeferredDeeplinkErrorPigeon *)error {
  YMMFAppMetricaDeferredDeeplinkParametersPigeon* pigeonResult = [[YMMFAppMetricaDeferredDeeplinkParametersPigeon alloc] init];
  pigeonResult.parameters = parameters;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (YMMFAppMetricaDeferredDeeplinkParametersPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFAppMetricaDeferredDeeplinkParametersPigeon *pigeonResult = [[YMMFAppMetricaDeferredDeeplinkParametersPigeon alloc] init];
  pigeonResult.parameters = GetNullableObject(dict, @"parameters");
  pigeonResult.error = [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:GetNullableObject(dict, @"error")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"parameters" : (self.parameters ?: [NSNull null]),
    @"error" : (self.error ? [self.error toMap] : [NSNull null]),
  };
}
@end

@implementation YMMFAppMetricaDeviceIdPigeon
+ (instancetype)makeWithDeviceId:(nullable NSString *)deviceId
    errorReason:(YMMFAppMetricaDeviceIdReasonPigeon)errorReason {
  YMMFAppMetricaDeviceIdPigeon* pigeonResult = [[YMMFAppMetricaDeviceIdPigeon alloc] init];
  pigeonResult.deviceId = deviceId;
  pigeonResult.errorReason = errorReason;
  return pigeonResult;
}
+ (YMMFAppMetricaDeviceIdPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFAppMetricaDeviceIdPigeon *pigeonResult = [[YMMFAppMetricaDeviceIdPigeon alloc] init];
  pigeonResult.deviceId = GetNullableObject(dict, @"deviceId");
  pigeonResult.errorReason = [GetNullableObject(dict, @"errorReason") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"deviceId" : (self.deviceId ?: [NSNull null]),
    @"errorReason" : @(self.errorReason),
  };
}
@end

@implementation YMMFRevenuePigeon
+ (instancetype)makeWithPrice:(NSString *)price
    currency:(NSString *)currency
    quantity:(nullable NSNumber *)quantity
    productId:(nullable NSString *)productId
    payload:(nullable NSString *)payload
    receipt:(nullable YMMFReceiptPigeon *)receipt
    transactionId:(nullable NSString *)transactionId {
  YMMFRevenuePigeon* pigeonResult = [[YMMFRevenuePigeon alloc] init];
  pigeonResult.price = price;
  pigeonResult.currency = currency;
  pigeonResult.quantity = quantity;
  pigeonResult.productId = productId;
  pigeonResult.payload = payload;
  pigeonResult.receipt = receipt;
  pigeonResult.transactionId = transactionId;
  return pigeonResult;
}
+ (YMMFRevenuePigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFRevenuePigeon *pigeonResult = [[YMMFRevenuePigeon alloc] init];
  pigeonResult.price = GetNullableObject(dict, @"price");
  NSAssert(pigeonResult.price != nil, @"");
  pigeonResult.currency = GetNullableObject(dict, @"currency");
  NSAssert(pigeonResult.currency != nil, @"");
  pigeonResult.quantity = GetNullableObject(dict, @"quantity");
  pigeonResult.productId = GetNullableObject(dict, @"productId");
  pigeonResult.payload = GetNullableObject(dict, @"payload");
  pigeonResult.receipt = [YMMFReceiptPigeon fromMap:GetNullableObject(dict, @"receipt")];
  pigeonResult.transactionId = GetNullableObject(dict, @"transactionId");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"price" : (self.price ?: [NSNull null]),
    @"currency" : (self.currency ?: [NSNull null]),
    @"quantity" : (self.quantity ?: [NSNull null]),
    @"productId" : (self.productId ?: [NSNull null]),
    @"payload" : (self.payload ?: [NSNull null]),
    @"receipt" : (self.receipt ? [self.receipt toMap] : [NSNull null]),
    @"transactionId" : (self.transactionId ?: [NSNull null]),
  };
}
@end

@implementation YMMFReceiptPigeon
+ (instancetype)makeWithData:(nullable NSString *)data
    signature:(nullable NSString *)signature {
  YMMFReceiptPigeon* pigeonResult = [[YMMFReceiptPigeon alloc] init];
  pigeonResult.data = data;
  pigeonResult.signature = signature;
  return pigeonResult;
}
+ (YMMFReceiptPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFReceiptPigeon *pigeonResult = [[YMMFReceiptPigeon alloc] init];
  pigeonResult.data = GetNullableObject(dict, @"data");
  pigeonResult.signature = GetNullableObject(dict, @"signature");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"data" : (self.data ?: [NSNull null]),
    @"signature" : (self.signature ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommerceAmountPigeon
+ (instancetype)makeWithAmount:(NSString *)amount
    currency:(NSString *)currency {
  YMMFECommerceAmountPigeon* pigeonResult = [[YMMFECommerceAmountPigeon alloc] init];
  pigeonResult.amount = amount;
  pigeonResult.currency = currency;
  return pigeonResult;
}
+ (YMMFECommerceAmountPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceAmountPigeon *pigeonResult = [[YMMFECommerceAmountPigeon alloc] init];
  pigeonResult.amount = GetNullableObject(dict, @"amount");
  NSAssert(pigeonResult.amount != nil, @"");
  pigeonResult.currency = GetNullableObject(dict, @"currency");
  NSAssert(pigeonResult.currency != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"amount" : (self.amount ?: [NSNull null]),
    @"currency" : (self.currency ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommerceProductPigeon
+ (instancetype)makeWithSku:(NSString *)sku
    name:(nullable NSString *)name
    categoriesPath:(nullable NSArray<NSString *> *)categoriesPath
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload
    actualPrice:(nullable YMMFECommercePricePigeon *)actualPrice
    originalPrice:(nullable YMMFECommercePricePigeon *)originalPrice
    promocodes:(nullable NSArray<NSString *> *)promocodes {
  YMMFECommerceProductPigeon* pigeonResult = [[YMMFECommerceProductPigeon alloc] init];
  pigeonResult.sku = sku;
  pigeonResult.name = name;
  pigeonResult.categoriesPath = categoriesPath;
  pigeonResult.payload = payload;
  pigeonResult.actualPrice = actualPrice;
  pigeonResult.originalPrice = originalPrice;
  pigeonResult.promocodes = promocodes;
  return pigeonResult;
}
+ (YMMFECommerceProductPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceProductPigeon *pigeonResult = [[YMMFECommerceProductPigeon alloc] init];
  pigeonResult.sku = GetNullableObject(dict, @"sku");
  NSAssert(pigeonResult.sku != nil, @"");
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.categoriesPath = GetNullableObject(dict, @"categoriesPath");
  pigeonResult.payload = GetNullableObject(dict, @"payload");
  pigeonResult.actualPrice = [YMMFECommercePricePigeon fromMap:GetNullableObject(dict, @"actualPrice")];
  pigeonResult.originalPrice = [YMMFECommercePricePigeon fromMap:GetNullableObject(dict, @"originalPrice")];
  pigeonResult.promocodes = GetNullableObject(dict, @"promocodes");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"sku" : (self.sku ?: [NSNull null]),
    @"name" : (self.name ?: [NSNull null]),
    @"categoriesPath" : (self.categoriesPath ?: [NSNull null]),
    @"payload" : (self.payload ?: [NSNull null]),
    @"actualPrice" : (self.actualPrice ? [self.actualPrice toMap] : [NSNull null]),
    @"originalPrice" : (self.originalPrice ? [self.originalPrice toMap] : [NSNull null]),
    @"promocodes" : (self.promocodes ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommercePricePigeon
+ (instancetype)makeWithFiat:(YMMFECommerceAmountPigeon *)fiat
    internalComponents:(nullable NSArray<YMMFECommerceAmountPigeon *> *)internalComponents {
  YMMFECommercePricePigeon* pigeonResult = [[YMMFECommercePricePigeon alloc] init];
  pigeonResult.fiat = fiat;
  pigeonResult.internalComponents = internalComponents;
  return pigeonResult;
}
+ (YMMFECommercePricePigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommercePricePigeon *pigeonResult = [[YMMFECommercePricePigeon alloc] init];
  pigeonResult.fiat = [YMMFECommerceAmountPigeon fromMap:GetNullableObject(dict, @"fiat")];
  NSAssert(pigeonResult.fiat != nil, @"");
  pigeonResult.internalComponents = GetNullableObject(dict, @"internalComponents");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"fiat" : (self.fiat ? [self.fiat toMap] : [NSNull null]),
    @"internalComponents" : (self.internalComponents ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommerceReferrerPigeon
+ (instancetype)makeWithType:(nullable NSString *)type
    identifier:(nullable NSString *)identifier
    screen:(nullable YMMFECommerceScreenPigeon *)screen {
  YMMFECommerceReferrerPigeon* pigeonResult = [[YMMFECommerceReferrerPigeon alloc] init];
  pigeonResult.type = type;
  pigeonResult.identifier = identifier;
  pigeonResult.screen = screen;
  return pigeonResult;
}
+ (YMMFECommerceReferrerPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceReferrerPigeon *pigeonResult = [[YMMFECommerceReferrerPigeon alloc] init];
  pigeonResult.type = GetNullableObject(dict, @"type");
  pigeonResult.identifier = GetNullableObject(dict, @"identifier");
  pigeonResult.screen = [YMMFECommerceScreenPigeon fromMap:GetNullableObject(dict, @"screen")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"type" : (self.type ?: [NSNull null]),
    @"identifier" : (self.identifier ?: [NSNull null]),
    @"screen" : (self.screen ? [self.screen toMap] : [NSNull null]),
  };
}
@end

@implementation YMMFECommerceScreenPigeon
+ (instancetype)makeWithName:(nullable NSString *)name
    categoriesPath:(nullable NSArray<NSString *> *)categoriesPath
    searchQuery:(nullable NSString *)searchQuery
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload {
  YMMFECommerceScreenPigeon* pigeonResult = [[YMMFECommerceScreenPigeon alloc] init];
  pigeonResult.name = name;
  pigeonResult.categoriesPath = categoriesPath;
  pigeonResult.searchQuery = searchQuery;
  pigeonResult.payload = payload;
  return pigeonResult;
}
+ (YMMFECommerceScreenPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceScreenPigeon *pigeonResult = [[YMMFECommerceScreenPigeon alloc] init];
  pigeonResult.name = GetNullableObject(dict, @"name");
  pigeonResult.categoriesPath = GetNullableObject(dict, @"categoriesPath");
  pigeonResult.searchQuery = GetNullableObject(dict, @"searchQuery");
  pigeonResult.payload = GetNullableObject(dict, @"payload");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"name" : (self.name ?: [NSNull null]),
    @"categoriesPath" : (self.categoriesPath ?: [NSNull null]),
    @"searchQuery" : (self.searchQuery ?: [NSNull null]),
    @"payload" : (self.payload ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommerceCartItemPigeon
+ (instancetype)makeWithProduct:(YMMFECommerceProductPigeon *)product
    quantity:(NSString *)quantity
    revenue:(YMMFECommercePricePigeon *)revenue
    referrer:(nullable YMMFECommerceReferrerPigeon *)referrer {
  YMMFECommerceCartItemPigeon* pigeonResult = [[YMMFECommerceCartItemPigeon alloc] init];
  pigeonResult.product = product;
  pigeonResult.quantity = quantity;
  pigeonResult.revenue = revenue;
  pigeonResult.referrer = referrer;
  return pigeonResult;
}
+ (YMMFECommerceCartItemPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceCartItemPigeon *pigeonResult = [[YMMFECommerceCartItemPigeon alloc] init];
  pigeonResult.product = [YMMFECommerceProductPigeon fromMap:GetNullableObject(dict, @"product")];
  NSAssert(pigeonResult.product != nil, @"");
  pigeonResult.quantity = GetNullableObject(dict, @"quantity");
  NSAssert(pigeonResult.quantity != nil, @"");
  pigeonResult.revenue = [YMMFECommercePricePigeon fromMap:GetNullableObject(dict, @"revenue")];
  NSAssert(pigeonResult.revenue != nil, @"");
  pigeonResult.referrer = [YMMFECommerceReferrerPigeon fromMap:GetNullableObject(dict, @"referrer")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"product" : (self.product ? [self.product toMap] : [NSNull null]),
    @"quantity" : (self.quantity ?: [NSNull null]),
    @"revenue" : (self.revenue ? [self.revenue toMap] : [NSNull null]),
    @"referrer" : (self.referrer ? [self.referrer toMap] : [NSNull null]),
  };
}
@end

@implementation YMMFECommerceOrderPigeon
+ (instancetype)makeWithIdentifier:(NSString *)identifier
    items:(NSArray<YMMFECommerceCartItemPigeon *> *)items
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload {
  YMMFECommerceOrderPigeon* pigeonResult = [[YMMFECommerceOrderPigeon alloc] init];
  pigeonResult.identifier = identifier;
  pigeonResult.items = items;
  pigeonResult.payload = payload;
  return pigeonResult;
}
+ (YMMFECommerceOrderPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceOrderPigeon *pigeonResult = [[YMMFECommerceOrderPigeon alloc] init];
  pigeonResult.identifier = GetNullableObject(dict, @"identifier");
  NSAssert(pigeonResult.identifier != nil, @"");
  pigeonResult.items = GetNullableObject(dict, @"items");
  NSAssert(pigeonResult.items != nil, @"");
  pigeonResult.payload = GetNullableObject(dict, @"payload");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"identifier" : (self.identifier ?: [NSNull null]),
    @"items" : (self.items ?: [NSNull null]),
    @"payload" : (self.payload ?: [NSNull null]),
  };
}
@end

@implementation YMMFECommerceEventPigeon
+ (instancetype)makeWithEventType:(NSString *)eventType
    cartItem:(nullable YMMFECommerceCartItemPigeon *)cartItem
    order:(nullable YMMFECommerceOrderPigeon *)order
    product:(nullable YMMFECommerceProductPigeon *)product
    referrer:(nullable YMMFECommerceReferrerPigeon *)referrer
    screen:(nullable YMMFECommerceScreenPigeon *)screen {
  YMMFECommerceEventPigeon* pigeonResult = [[YMMFECommerceEventPigeon alloc] init];
  pigeonResult.eventType = eventType;
  pigeonResult.cartItem = cartItem;
  pigeonResult.order = order;
  pigeonResult.product = product;
  pigeonResult.referrer = referrer;
  pigeonResult.screen = screen;
  return pigeonResult;
}
+ (YMMFECommerceEventPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFECommerceEventPigeon *pigeonResult = [[YMMFECommerceEventPigeon alloc] init];
  pigeonResult.eventType = GetNullableObject(dict, @"eventType");
  NSAssert(pigeonResult.eventType != nil, @"");
  pigeonResult.cartItem = [YMMFECommerceCartItemPigeon fromMap:GetNullableObject(dict, @"cartItem")];
  pigeonResult.order = [YMMFECommerceOrderPigeon fromMap:GetNullableObject(dict, @"order")];
  pigeonResult.product = [YMMFECommerceProductPigeon fromMap:GetNullableObject(dict, @"product")];
  pigeonResult.referrer = [YMMFECommerceReferrerPigeon fromMap:GetNullableObject(dict, @"referrer")];
  pigeonResult.screen = [YMMFECommerceScreenPigeon fromMap:GetNullableObject(dict, @"screen")];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"eventType" : (self.eventType ?: [NSNull null]),
    @"cartItem" : (self.cartItem ? [self.cartItem toMap] : [NSNull null]),
    @"order" : (self.order ? [self.order toMap] : [NSNull null]),
    @"product" : (self.product ? [self.product toMap] : [NSNull null]),
    @"referrer" : (self.referrer ? [self.referrer toMap] : [NSNull null]),
    @"screen" : (self.screen ? [self.screen toMap] : [NSNull null]),
  };
}
@end

@implementation YMMFStackTraceElementPigeon
+ (instancetype)makeWithClassName:(NSString *)className
    fileName:(nullable NSString *)fileName
    line:(NSNumber *)line
    column:(NSNumber *)column
    methodName:(NSString *)methodName {
  YMMFStackTraceElementPigeon* pigeonResult = [[YMMFStackTraceElementPigeon alloc] init];
  pigeonResult.className = className;
  pigeonResult.fileName = fileName;
  pigeonResult.line = line;
  pigeonResult.column = column;
  pigeonResult.methodName = methodName;
  return pigeonResult;
}
+ (YMMFStackTraceElementPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFStackTraceElementPigeon *pigeonResult = [[YMMFStackTraceElementPigeon alloc] init];
  pigeonResult.className = GetNullableObject(dict, @"className");
  NSAssert(pigeonResult.className != nil, @"");
  pigeonResult.fileName = GetNullableObject(dict, @"fileName");
  pigeonResult.line = GetNullableObject(dict, @"line");
  NSAssert(pigeonResult.line != nil, @"");
  pigeonResult.column = GetNullableObject(dict, @"column");
  NSAssert(pigeonResult.column != nil, @"");
  pigeonResult.methodName = GetNullableObject(dict, @"methodName");
  NSAssert(pigeonResult.methodName != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"className" : (self.className ?: [NSNull null]),
    @"fileName" : (self.fileName ?: [NSNull null]),
    @"line" : (self.line ?: [NSNull null]),
    @"column" : (self.column ?: [NSNull null]),
    @"methodName" : (self.methodName ?: [NSNull null]),
  };
}
@end

@implementation YMMFErrorDetailsPigeon
+ (instancetype)makeWithExceptionClass:(NSString *)exceptionClass
    message:(nullable NSString *)message
    dartVersion:(NSString *)dartVersion
    backtrace:(nullable NSArray<YMMFStackTraceElementPigeon *> *)backtrace {
  YMMFErrorDetailsPigeon* pigeonResult = [[YMMFErrorDetailsPigeon alloc] init];
  pigeonResult.exceptionClass = exceptionClass;
  pigeonResult.message = message;
  pigeonResult.dartVersion = dartVersion;
  pigeonResult.backtrace = backtrace;
  return pigeonResult;
}
+ (YMMFErrorDetailsPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFErrorDetailsPigeon *pigeonResult = [[YMMFErrorDetailsPigeon alloc] init];
  pigeonResult.exceptionClass = GetNullableObject(dict, @"exceptionClass");
  NSAssert(pigeonResult.exceptionClass != nil, @"");
  pigeonResult.message = GetNullableObject(dict, @"message");
  pigeonResult.dartVersion = GetNullableObject(dict, @"dartVersion");
  NSAssert(pigeonResult.dartVersion != nil, @"");
  pigeonResult.backtrace = GetNullableObject(dict, @"backtrace");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"exceptionClass" : (self.exceptionClass ?: [NSNull null]),
    @"message" : (self.message ?: [NSNull null]),
    @"dartVersion" : (self.dartVersion ?: [NSNull null]),
    @"backtrace" : (self.backtrace ?: [NSNull null]),
  };
}
@end

@implementation YMMFUserProfileAttributePigeon
+ (instancetype)makeWithKey:(NSString *)key
    doubleValue:(nullable NSNumber *)doubleValue
    stringValue:(nullable NSString *)stringValue
    boolValue:(nullable NSNumber *)boolValue
    year:(nullable NSNumber *)year
    month:(nullable NSNumber *)month
    day:(nullable NSNumber *)day
    age:(nullable NSNumber *)age
    genderValue:(YMMFGenderPigeon)genderValue
    ifUndefined:(nullable NSNumber *)ifUndefined
    reset:(nullable NSNumber *)reset
    type:(YMMFUserProfileAttributeType)type {
  YMMFUserProfileAttributePigeon* pigeonResult = [[YMMFUserProfileAttributePigeon alloc] init];
  pigeonResult.key = key;
  pigeonResult.doubleValue = doubleValue;
  pigeonResult.stringValue = stringValue;
  pigeonResult.boolValue = boolValue;
  pigeonResult.year = year;
  pigeonResult.month = month;
  pigeonResult.day = day;
  pigeonResult.age = age;
  pigeonResult.genderValue = genderValue;
  pigeonResult.ifUndefined = ifUndefined;
  pigeonResult.reset = reset;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (YMMFUserProfileAttributePigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFUserProfileAttributePigeon *pigeonResult = [[YMMFUserProfileAttributePigeon alloc] init];
  pigeonResult.key = GetNullableObject(dict, @"key");
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.doubleValue = GetNullableObject(dict, @"doubleValue");
  pigeonResult.stringValue = GetNullableObject(dict, @"stringValue");
  pigeonResult.boolValue = GetNullableObject(dict, @"boolValue");
  pigeonResult.year = GetNullableObject(dict, @"year");
  pigeonResult.month = GetNullableObject(dict, @"month");
  pigeonResult.day = GetNullableObject(dict, @"day");
  pigeonResult.age = GetNullableObject(dict, @"age");
  pigeonResult.genderValue = [GetNullableObject(dict, @"genderValue") integerValue];
  pigeonResult.ifUndefined = GetNullableObject(dict, @"ifUndefined");
  pigeonResult.reset = GetNullableObject(dict, @"reset");
  pigeonResult.type = [GetNullableObject(dict, @"type") integerValue];
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"key" : (self.key ?: [NSNull null]),
    @"doubleValue" : (self.doubleValue ?: [NSNull null]),
    @"stringValue" : (self.stringValue ?: [NSNull null]),
    @"boolValue" : (self.boolValue ?: [NSNull null]),
    @"year" : (self.year ?: [NSNull null]),
    @"month" : (self.month ?: [NSNull null]),
    @"day" : (self.day ?: [NSNull null]),
    @"age" : (self.age ?: [NSNull null]),
    @"genderValue" : @(self.genderValue),
    @"ifUndefined" : (self.ifUndefined ?: [NSNull null]),
    @"reset" : (self.reset ?: [NSNull null]),
    @"type" : @(self.type),
  };
}
@end

@implementation YMMFUserProfilePigeon
+ (instancetype)makeWithAttributes:(NSArray<YMMFUserProfileAttributePigeon *> *)attributes {
  YMMFUserProfilePigeon* pigeonResult = [[YMMFUserProfilePigeon alloc] init];
  pigeonResult.attributes = attributes;
  return pigeonResult;
}
+ (YMMFUserProfilePigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFUserProfilePigeon *pigeonResult = [[YMMFUserProfilePigeon alloc] init];
  pigeonResult.attributes = GetNullableObject(dict, @"attributes");
  NSAssert(pigeonResult.attributes != nil, @"");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"attributes" : (self.attributes ?: [NSNull null]),
  };
}
@end

@implementation YMMFReporterConfigPigeon
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    sessionTimeout:(nullable NSNumber *)sessionTimeout
    statisticsSending:(nullable NSNumber *)statisticsSending
    maxReportsInDatabaseCount:(nullable NSNumber *)maxReportsInDatabaseCount
    userProfileID:(nullable NSString *)userProfileID
    logs:(nullable NSNumber *)logs {
  YMMFReporterConfigPigeon* pigeonResult = [[YMMFReporterConfigPigeon alloc] init];
  pigeonResult.apiKey = apiKey;
  pigeonResult.sessionTimeout = sessionTimeout;
  pigeonResult.statisticsSending = statisticsSending;
  pigeonResult.maxReportsInDatabaseCount = maxReportsInDatabaseCount;
  pigeonResult.userProfileID = userProfileID;
  pigeonResult.logs = logs;
  return pigeonResult;
}
+ (YMMFReporterConfigPigeon *)fromMap:(NSDictionary *)dict {
  // begin of patch
  // CAUTION: this is vary important patch that will return nil object in case of nil dictionary
  if (dict == nil) {
    return nil;
  }
  // end of patch
  YMMFReporterConfigPigeon *pigeonResult = [[YMMFReporterConfigPigeon alloc] init];
  pigeonResult.apiKey = GetNullableObject(dict, @"apiKey");
  NSAssert(pigeonResult.apiKey != nil, @"");
  pigeonResult.sessionTimeout = GetNullableObject(dict, @"sessionTimeout");
  pigeonResult.statisticsSending = GetNullableObject(dict, @"statisticsSending");
  pigeonResult.maxReportsInDatabaseCount = GetNullableObject(dict, @"maxReportsInDatabaseCount");
  pigeonResult.userProfileID = GetNullableObject(dict, @"userProfileID");
  pigeonResult.logs = GetNullableObject(dict, @"logs");
  return pigeonResult;
}
- (NSDictionary *)toMap {
  return @{
    @"apiKey" : (self.apiKey ?: [NSNull null]),
    @"sessionTimeout" : (self.sessionTimeout ?: [NSNull null]),
    @"statisticsSending" : (self.statisticsSending ?: [NSNull null]),
    @"maxReportsInDatabaseCount" : (self.maxReportsInDatabaseCount ?: [NSNull null]),
    @"userProfileID" : (self.userProfileID ?: [NSNull null]),
    @"logs" : (self.logs ?: [NSNull null]),
  };
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFAppMetricaConfigPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFLocationPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFPreloadInfoPigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFAppMetricaConfigPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFLocationPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFPreloadInfoPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFAppMetricaConfigConverterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFAppMetricaConfigConverterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFAppMetricaConfigConverterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFAppMetricaConfigConverterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFAppMetricaConfigConverterPigeonGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    YMMFAppMetricaConfigConverterPigeonCodecReaderWriter *readerWriter = [[YMMFAppMetricaConfigConverterPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void YMMFAppMetricaConfigConverterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFAppMetricaConfigConverterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaConfigConverterPigeon.toJson"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaConfigConverterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toJsonConfig:error:)], @"YMMFAppMetricaConfigConverterPigeon api (%@) doesn't respond to @selector(toJsonConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFAppMetricaConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api toJsonConfig:arg_config error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface YMMFAppMetricaPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFAppMetricaPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFAppMetricaConfigPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFAppMetricaDeferredDeeplinkErrorPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFAppMetricaDeferredDeeplinkParametersPigeon fromMap:[self readValue]];
    
    case 131:     
      return [YMMFAppMetricaDeferredDeeplinkPigeon fromMap:[self readValue]];
    
    case 132:     
      return [YMMFAppMetricaDeviceIdPigeon fromMap:[self readValue]];
    
    case 133:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 134:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 135:     
      return [YMMFECommerceCartItemPigeon fromMap:[self readValue]];
    
    case 136:     
      return [YMMFECommerceEventPigeon fromMap:[self readValue]];
    
    case 137:     
      return [YMMFECommerceOrderPigeon fromMap:[self readValue]];
    
    case 138:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 139:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 140:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 141:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 142:     
      return [YMMFECommerceReferrerPigeon fromMap:[self readValue]];
    
    case 143:     
      return [YMMFECommerceScreenPigeon fromMap:[self readValue]];
    
    case 144:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 145:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 146:     
      return [YMMFLocationPigeon fromMap:[self readValue]];
    
    case 147:     
      return [YMMFPreloadInfoPigeon fromMap:[self readValue]];
    
    case 148:     
      return [YMMFReceiptPigeon fromMap:[self readValue]];
    
    case 149:     
      return [YMMFReporterConfigPigeon fromMap:[self readValue]];
    
    case 150:     
      return [YMMFRevenuePigeon fromMap:[self readValue]];
    
    case 151:     
      return [YMMFStackTraceElementPigeon fromMap:[self readValue]];
    
    case 152:     
      return [YMMFUserProfileAttributePigeon fromMap:[self readValue]];
    
    case 153:     
      return [YMMFUserProfilePigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFAppMetricaPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFAppMetricaPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFAppMetricaConfigPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkErrorPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkParametersPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeferredDeeplinkPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFAppMetricaDeviceIdPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceCartItemPigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceEventPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceOrderPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceReferrerPigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceScreenPigeon class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFLocationPigeon class]]) {
    [self writeByte:146];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFPreloadInfoPigeon class]]) {
    [self writeByte:147];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReceiptPigeon class]]) {
    [self writeByte:148];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReporterConfigPigeon class]]) {
    [self writeByte:149];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFRevenuePigeon class]]) {
    [self writeByte:150];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStackTraceElementPigeon class]]) {
    [self writeByte:151];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfileAttributePigeon class]]) {
    [self writeByte:152];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfilePigeon class]]) {
    [self writeByte:153];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFAppMetricaPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFAppMetricaPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFAppMetricaPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFAppMetricaPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFAppMetricaPigeonGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    YMMFAppMetricaPigeonCodecReaderWriter *readerWriter = [[YMMFAppMetricaPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void YMMFAppMetricaPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFAppMetricaPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.activate"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateConfig:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(activateConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFAppMetricaConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api activateConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.activateReporter"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateReporterConfig:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(activateReporterConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFReporterConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api activateReporterConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.touchReporter"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(touchReporterApiKey:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(touchReporterApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api touchReporterApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.getLibraryApiLevel"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryApiLevelWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryApiLevelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getLibraryApiLevelWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.getLibraryVersion"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryVersionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getLibraryVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(resumeSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resumeSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(pauseSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportAppOpen"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportAppOpenDeeplink:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportAppOpenDeeplink:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_deeplink = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportAppOpenDeeplink:arg_deeplink error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorError:message:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorError:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 0);
        NSString *arg_message = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportErrorError:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupGroupId:error:message:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupGroupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 0);
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        NSString *arg_message = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportErrorWithGroupGroupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionError:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionError:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportUnhandledExceptionError:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonEventName:attributesJson:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventWithJsonEventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        NSString *arg_attributesJson = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportEventWithJsonEventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventEventName:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventEventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportEventEventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportReferralUrl"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportReferralUrlReferralUrl:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportReferralUrlReferralUrl:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_referralUrl = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportReferralUrlReferralUrl:arg_referralUrl error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplink"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkWithCompletion:^(YMMFAppMetricaDeferredDeeplinkPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestDeferredDeeplinkParameters"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkParametersWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkParametersWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkParametersWithCompletion:^(YMMFAppMetricaDeferredDeeplinkParametersPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.requestAppMetricaDeviceID"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestAppMetricaDeviceIDWithCompletion:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(requestAppMetricaDeviceIDWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestAppMetricaDeviceIDWithCompletion:^(YMMFAppMetricaDeviceIdPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(sendEventsBufferWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api sendEventsBufferWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setLocation"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationLocation:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationLocation:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFLocationPigeon *arg_location = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocationLocation:arg_location error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setLocationTracking"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationTrackingEnabled:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationTrackingEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocationTrackingEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setStatisticsSending"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStatisticsSendingEnabled:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setStatisticsSendingEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setStatisticsSendingEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDUserProfileID:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(setUserProfileIDUserProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_userProfileID = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUserProfileIDUserProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileUserProfile:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUserProfileUserProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFUserProfilePigeon *arg_userProfile = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportUserProfileUserProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.putErrorEnvironmentValue"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(putErrorEnvironmentValueKey:value:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(putErrorEnvironmentValueKey:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        NSString *arg_value = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api putErrorEnvironmentValueKey:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueRevenue:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportRevenueRevenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFRevenuePigeon *arg_revenue = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportRevenueRevenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceEvent:error:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(reportECommerceEvent:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        YMMFECommerceEventPigeon *arg_event = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportECommerceEvent:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.AppMetricaPigeon.handlePluginInitFinished"
        binaryMessenger:binaryMessenger
        codec:YMMFAppMetricaPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(handlePluginInitFinishedWithError:)], @"YMMFAppMetricaPigeon api (%@) doesn't respond to @selector(handlePluginInitFinishedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api handlePluginInitFinishedWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface YMMFReporterPigeonCodecReader : FlutterStandardReader
@end
@implementation YMMFReporterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 129:     
      return [YMMFECommerceAmountPigeon fromMap:[self readValue]];
    
    case 130:     
      return [YMMFECommerceCartItemPigeon fromMap:[self readValue]];
    
    case 131:     
      return [YMMFECommerceEventPigeon fromMap:[self readValue]];
    
    case 132:     
      return [YMMFECommerceOrderPigeon fromMap:[self readValue]];
    
    case 133:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 134:     
      return [YMMFECommercePricePigeon fromMap:[self readValue]];
    
    case 135:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 136:     
      return [YMMFECommerceProductPigeon fromMap:[self readValue]];
    
    case 137:     
      return [YMMFECommerceReferrerPigeon fromMap:[self readValue]];
    
    case 138:     
      return [YMMFECommerceScreenPigeon fromMap:[self readValue]];
    
    case 139:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 140:     
      return [YMMFErrorDetailsPigeon fromMap:[self readValue]];
    
    case 141:     
      return [YMMFReceiptPigeon fromMap:[self readValue]];
    
    case 142:     
      return [YMMFRevenuePigeon fromMap:[self readValue]];
    
    case 143:     
      return [YMMFStackTraceElementPigeon fromMap:[self readValue]];
    
    case 144:     
      return [YMMFUserProfileAttributePigeon fromMap:[self readValue]];
    
    case 145:     
      return [YMMFUserProfilePigeon fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface YMMFReporterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation YMMFReporterPigeonCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceAmountPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceCartItemPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceEventPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceOrderPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommercePricePigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceProductPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceReferrerPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFECommerceScreenPigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFErrorDetailsPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFReceiptPigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFRevenuePigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFStackTraceElementPigeon class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfileAttributePigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[YMMFUserProfilePigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface YMMFReporterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation YMMFReporterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[YMMFReporterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[YMMFReporterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *YMMFReporterPigeonGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    YMMFReporterPigeonCodecReaderWriter *readerWriter = [[YMMFReporterPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void YMMFReporterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<YMMFReporterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(sendEventsBufferApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api sendEventsBufferApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventApiKey:eventName:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportEventApiKey:eventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportEventApiKey:arg_apiKey eventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 1);
        NSString *arg_attributesJson = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportEventWithJsonApiKey:arg_apiKey eventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorApiKey:error:message:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportErrorApiKey:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        NSString *arg_message = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportErrorApiKey:arg_apiKey error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupApiKey:groupId:error:message:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupApiKey:groupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 1);
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 2);
        NSString *arg_message = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api reportErrorWithGroupApiKey:arg_apiKey groupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionApiKey:error:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionApiKey:error:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        YMMFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportUnhandledExceptionApiKey:arg_apiKey error:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(resumeSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api resumeSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionApiKey:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(pauseSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pauseSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.setStatisticsSending"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setStatisticsSendingApiKey:enabled:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(setStatisticsSendingApiKey:enabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setStatisticsSendingApiKey:arg_apiKey enabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDApiKey:userProfileID:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(setUserProfileIDApiKey:userProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_userProfileID = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setUserProfileIDApiKey:arg_apiKey userProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileApiKey:userProfile:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportUserProfileApiKey:userProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        YMMFUserProfilePigeon *arg_userProfile = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportUserProfileApiKey:arg_apiKey userProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueApiKey:revenue:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportRevenueApiKey:revenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        YMMFRevenuePigeon *arg_revenue = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportRevenueApiKey:arg_apiKey revenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.ReporterPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:YMMFReporterPigeonGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceApiKey:event:error:)], @"YMMFReporterPigeon api (%@) doesn't respond to @selector(reportECommerceApiKey:event:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        YMMFECommerceEventPigeon *arg_event = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportECommerceApiKey:arg_apiKey event:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
